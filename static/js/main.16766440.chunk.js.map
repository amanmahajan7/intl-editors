{"version":3,"sources":["IntlUtils.tsx","IntlEditors.tsx","IntlFormatters.tsx","index.tsx"],"names":["getNumberFormat","memoizeIntlConstructor","Intl","NumberFormat","intlStyle","DECIMAL","PERCENT","CURRENCY","getDefaultFractionDigitsForLocale","locale","currency","_numberFormat$resolve","style","resolvedOptions","minimumFractionDigits","maximumFractionDigits","DECIMAL_REGEX","NUMBER_REGEX","replaceDecimalSeparator","value","separator","toString","replace","NumberEditorBase","decimalSeparator","formatNumber","_this","props","intl","defaultMaximumFractionDigits","state","getInitialState","isCopyPaste","setValue","stateToSet","isValueChanged","hasOwnProperty","Object","objectWithoutProperties","setState","onChange","showLastValidValue","isInvalid","displayValue","handleCopyPaste","pastedValue","parsedValue","trim","regex","RegExp","concat","parseFloat","Number","isNaN","undefined","parseDecimal","isPastedValueValid","handleChange","_ref","target","test","length","_this$props$maximumFr","_displayValue$split","split","_displayValue$split2","slicedToArray","displayValueIntegerPart","displayValueDecimalPart","roundedDisplayValue","slice","handleFocus","isFocused","handleBlur","handleClick","handleKeyDown","e","console","log","ctrlKey","shiftKey","metaKey","altKey","keyCode","handlePaste","getInputProps","formatValue","onFocus","onBlur","onKeyDown","onClick","onPaste","this","select","_this$props","_this2","allowedFormatOptions","_this$props$maximumFr2","fractionDigits","push","some","options","allowedValue","stringToWorkOn","stringToReplace","stringToReplaceWith","ignoreCase","arguments","re","replaceAll","children","getRenderProps","React","NumberEditor","injectIntl","withRef","errorIcon","react","Icon","name","link","gridNumberEditorFactory","intlProps","_React$Component2","GridNumberEditor","_getPrototypeOf3","_this3","classCallCheck","_len2","args","Array","_key2","possibleConstructorReturn","getPrototypeOf","call","apply","input","defaultValue","focus","current","inherits","createClass","key","autoFocus","_this4","_this$props2","rest","assign","_ref2","Input","error","ref","icon","iconPosition","GridDecimalEditor","GridPercentEditor","GridCurrencyEditor","getDefaultFractionDigits","defaultFractionDigits","extraProps","defaultDigits","NumberFormatter","index_es","DecimalFormatter","CurrencyFormatter","PercentFormatter","RateFormatter","_ref3","en","require","fr","is","addLocaleData","toConsumableArray","Editors","currencyCode","defineProperty","margin","marginTop","type","Formatters","currencyFormatterValue","decimalFormatterValue","percentFormatterValue","rateFormatterValue","render","src_Editors","src_Formatters","document","getElementById"],"mappings":"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","file":"static/js/main.16766440.chunk.js","sourcesContent":["import { InjectedIntl } from \"react-intl\";\nimport memoizeIntlConstructor from \"intl-format-cache\";\n\n// Use a memoized formatter as creating instances of Intl formats is an expensive operation\nconst getNumberFormat = memoizeIntlConstructor(Intl.NumberFormat);\n\nexport const intlStyle = {\n  DECIMAL: \"decimal\",\n  PERCENT: \"percent\",\n  CURRENCY: \"currency\"\n};\n\n// Find the default minimum fraction digits for a locale and currency code\nexport function getDefaultFractionDigitsForLocale(\n  locale: string,\n  currency?: string\n) {\n  const style = typeof currency === \"string\" ? \"currency\" : \"decimal\";\n  const numberFormat = getNumberFormat(locale, { currency, style });\n  const {\n    minimumFractionDigits,\n    maximumFractionDigits\n  } = numberFormat.resolvedOptions();\n  return { minimumFractionDigits, maximumFractionDigits };\n}\n\nexport function getDecimalSeparator({ formatNumber }: InjectedIntl) {\n  const testValue = formatNumber(1.1);\n  return testValue[1];\n}\n\nexport function parseDecimal(value: unknown, decimalSeparator: string) {\n  // Return the value as-is if it's already a number\n  if (typeof value === \"number\") {\n    return value;\n  }\n\n  if (typeof value === \"string\") {\n    if (value.trim() === \"\") {\n      return undefined;\n    }\n\n    // Build regex to strip out everything except digits and decimal point\n    const regex = new RegExp(`[^0-9${decimalSeparator}]`, \"g\");\n    const parsedValue = parseFloat(\n      value\n        .replace(regex, \"\") // strip out any cruft\n        .replace(decimalSeparator, \".\") // make sure decimal point is standard\n    );\n\n    return !Number.isNaN(parsedValue) ? parsedValue : undefined;\n  }\n\n  // TODO: What should be the default value?\n  return undefined;\n}\n","import * as React from \"react\";\nimport { injectIntl, InjectedIntlProps } from \"react-intl\";\nimport { Icon, Input } from \"semantic-ui-react\";\n\nimport {\n  getDecimalSeparator,\n  getDefaultFractionDigitsForLocale,\n  parseDecimal,\n  intlStyle\n} from \"./IntlUtils\";\n\nconst NBSP = \"\\u00A0\";\nconst DECIMAL_SEPARATORS = [\".\", \",\"];\nconst DECIMAL_REGEX = /[.,]/;\nconst NUMBER_REGEX = /^\\d*[.,]?\\d*$/;\n\nexport const replaceAll = (\n  stringToWorkOn: string,\n  stringToReplace: string,\n  stringToReplaceWith: string,\n  ignoreCase = false\n): string => {\n  const re = new RegExp(\n    stringToReplace.replace(/([/,!\\\\^${}[\\]().*+?|<>\\-&])/g, \"\\\\$&\"),\n    ignoreCase ? \"gi\" : \"g\"\n  );\n  stringToReplaceWith =\n    typeof stringToReplaceWith === \"string\"\n      ? stringToReplaceWith.replace(/\\$/g, \"$$$$\")\n      : stringToReplaceWith;\n  return stringToWorkOn.replace(re, stringToReplaceWith);\n};\n\ntype InputProps = Pick<\n  React.InputHTMLAttributes<HTMLInputElement>,\n  'value' | 'onChange' | 'onFocus' | 'onBlur' | 'onKeyDown' | 'onClick' | 'onPaste'\n>;\n\ninterface NumberEditorProps extends Intl.NumberFormatOptions {\n  value?: number;\n  onChange: (value?: number) => void;\n  select?: () => void;\n  children: (\n    renderProps: {\n      isInvalid: boolean;\n      getInputProps: () => InputProps\n    }\n  ) => React.ReactNode;\n}\n\ninterface NumberEditorState {\n  value?: number;\n  displayValue: string;\n  isInvalid: boolean;\n  isFocused: boolean;\n}\n\nfunction replaceDecimalSeparator(value: string | number | undefined | null, separator: string) {\n  return value != null\n    ? value.toString().replace(DECIMAL_REGEX, separator)\n    : '';\n}\n\nclass NumberEditorBase extends React.Component<NumberEditorProps & InjectedIntlProps, NumberEditorState> {\n  readonly decimalSeparator = getDecimalSeparator(this.props.intl);\n  readonly defaultMaximumFractionDigits = getDefaultFractionDigitsForLocale(this.props.intl.locale, this.props.currency).maximumFractionDigits;\n  readonly state: Readonly<NumberEditorState> = this.getInitialState();\n\n  isCopyPaste = false;\n\n  componentDidUpdate() {\n    if (this.state.isInvalid) {\n      // Select the value if it is invalid\n      const { select } = this.props;\n      if (select) {\n        select();\n      }\n    }\n  }\n\n  formatValue(value: number) {\n    const { intl, style, currency, minimumFractionDigits, maximumFractionDigits } = this.props;\n    return intl.formatNumber(value, { style, currency, minimumFractionDigits, maximumFractionDigits });\n  }\n\n  isPastedValueValid(pastedValue: string, parsedValue: number) {\n    const allowedFormatOptions: Intl.NumberFormatOptions[] = [];\n    const { maximumFractionDigits = this.defaultMaximumFractionDigits } = this.props;\n\n    for (let fractionDigits = 0; fractionDigits <= maximumFractionDigits; fractionDigits++) {\n      allowedFormatOptions.push({\n        style: intlStyle.DECIMAL,\n        minimumFractionDigits: fractionDigits\n      });\n\n      if (this.props.style === intlStyle.CURRENCY) {\n        allowedFormatOptions.push({\n          style: intlStyle.CURRENCY,\n          currency: this.props.currency,\n          minimumFractionDigits: fractionDigits\n        });\n      }\n    }\n\n\n    // If the formatted value is same as the pasted value then it is considered valid\n    // All other values are invalid. This does not handle all the cases as it is difficult\n    // to address all the valid cases. This algorithm will be modified as needed\n    return allowedFormatOptions.some(options => {\n      const allowedValue = this.props.intl.formatNumber(parsedValue, options);\n      return pastedValue === replaceAll(allowedValue, NBSP, ' ');\n    });\n  }\n\n  getInitialState() {\n    const { value } = this.props;\n    return {\n      displayValue: replaceDecimalSeparator(value, this.decimalSeparator),\n      isInvalid: false,\n      isFocused: false\n    };\n  }\n\n  setValue = (stateToSet: any) => {\n    const isValueChanged = stateToSet.hasOwnProperty('value');\n    const { value, ...state } = stateToSet;\n    this.setState(state, () => {\n      if (isValueChanged && this.props.value !== value) {\n        this.props.onChange(value);\n      }\n    });\n  };\n\n  showLastValidValue = () => {\n    if (this.state.isInvalid) {\n      const { value } = this.props;\n      this.setValue({\n        displayValue: replaceDecimalSeparator(value, this.decimalSeparator),\n        isInvalid: false\n      });\n    }\n  };\n\n  handleCopyPaste = (pastedValue: string) => {\n    this.isCopyPaste = false;\n    const parsedValue = parseDecimal(pastedValue, this.decimalSeparator);\n    const isInvalid = parsedValue == null || !this.isPastedValueValid(pastedValue, parsedValue);\n\n    if (isInvalid) {\n      // Show the invalid displayValue, we do not change the underlying value\n      // displayValue will be reverted to the last valid value on the next action (blur, click)\n      this.setValue({\n        isInvalid: true,\n        displayValue: pastedValue\n      });\n      return;\n    }\n\n    // Value is valid, show the value without any formating elements (percentage, currency symbols etc.)\n    this.setValue({\n      isInvalid: false,\n      value: parsedValue,\n      displayValue: replaceDecimalSeparator(parsedValue, this.decimalSeparator)\n    });\n  };\n\n  handleChange = ({ target }: React.ChangeEvent<HTMLInputElement>) => {\n    const { value } = target;\n\n    if (value === '') {\n      this.setValue({ value: undefined, displayValue: '' });\n      return;\n    }\n\n    if (this.isCopyPaste) {\n      this.handleCopyPaste(value);\n      return;\n    }\n\n    // Check if value is a valid number\n    if (NUMBER_REGEX.test(value)) {\n      // Check if value has a decimal separator\n      if (DECIMAL_REGEX.test(value)) {\n        // Replace the decimal separator as per the current locale\n        const displayValue = replaceDecimalSeparator(value, this.decimalSeparator);\n        // Add \"0\" in front if the decimal separator is entered in empty field\n        if (displayValue.length === 1) {\n          this.setValue({ value: 0, displayValue: `0${displayValue}` });\n          return;\n        }\n\n        // Check the precision setting and set the maximum fraction digits.\n        const { maximumFractionDigits = this.defaultMaximumFractionDigits } = this.props;\n        const [displayValueIntegerPart, displayValueDecimalPart] = displayValue.split(this.decimalSeparator);\n\n        if (displayValueDecimalPart.length > maximumFractionDigits) {\n          const roundedDisplayValue = `${displayValueIntegerPart}${this.decimalSeparator}${displayValueDecimalPart.slice(0, maximumFractionDigits)}`;\n          this.setValue({\n            value: parseFloat(replaceDecimalSeparator(roundedDisplayValue, '.')),\n            displayValue: roundedDisplayValue\n          });\n          return;\n        }\n\n        this.setValue({\n          value: parseFloat(replaceDecimalSeparator(value, '.')),\n          displayValue\n        });\n        return;\n      }\n\n      // Value has no decimal separator. Convert value to number and convert\n      // it back to string. This removes the leading 0 i.e 01 -> 1\n      const parsedValue = parseFloat(value);\n      this.setValue({ value: parsedValue, displayValue: parsedValue.toString() });\n    }\n\n    // Value is not a valid number so it is rejected\n  };\n\n  handleFocus = () => {\n    this.setState({ isFocused: true });\n  };\n\n  handleBlur = () => {\n    this.setState({ isFocused: false });\n    this.showLastValidValue();\n  };\n\n  handleClick = () => {\n    this.showLastValidValue();\n  };\n\n  handleKeyDown = (e: React.KeyboardEvent<HTMLInputElement>) => {\n    console.log(e.ctrlKey, e.shiftKey, e.metaKey, e.altKey, e.keyCode)\n    if (e.ctrlKey && e.keyCode === 86) {\n      this.isCopyPaste = true;\n    }\n  };\n\n  handlePaste = () => {\n    this.isCopyPaste = true;\n  };\n\n  getInputProps = () => {\n    const { value } = this.props;\n    const { displayValue } = this.state;\n    const formattedValue = !this.state.isFocused && value != null ? this.formatValue(value) : displayValue;\n\n    return {\n      value: formattedValue,\n      onChange: this.handleChange,\n      onFocus: this.handleFocus,\n      onBlur: this.handleBlur,\n      onKeyDown: this.handleKeyDown,\n      onClick: this.handleClick,\n      onPaste: this.handlePaste\n    };\n  };\n\n  getRenderProps() {\n    const { isInvalid } = this.state;\n\n    return {\n      isInvalid,\n      getInputProps: this.getInputProps\n    };\n  }\n\n  render() {\n    return this.props.children(this.getRenderProps());\n  }\n}\n\nconst NumberEditor = injectIntl(NumberEditorBase, { withRef: true });\n\nconst errorMessage =\n  \"Invalid format. Only numbers and single decimal separator are allowed.\";\nconst errorIcon = <Icon name=\"exclamation circle\" link />;\n\ntype GridEditorProps = Pick<NumberEditorProps, 'minimumFractionDigits' | 'maximumFractionDigits'> & {\n  defaultValue?: number;\n  autoFocus?: boolean;\n};\ntype GridCurrencyEditorProps = GridEditorProps & { currency: string; };\n\nfunction gridNumberEditorFactory<T extends {}>(intlProps: Intl.NumberFormatOptions): React.ComponentClass<T & GridEditorProps> {\n  return class GridNumberEditor extends React.Component<T & GridEditorProps> {\n    input = React.createRef<Input>();\n    readonly state: { value?: number } = { value: this.props.defaultValue };\n\n    componentDidMount() {\n      const { autoFocus } = this.props;\n      if (autoFocus) {\n        this.focus();\n      }\n    }\n\n    handleChange = (value?: number) => {\n      this.setState({ value });\n    };\n\n    focus = () => {\n      const { current } = this.input;\n      if (current != null) {\n        current.focus();\n      }\n    };\n\n    select = () => {\n      const { current } = this.input;\n      if (current != null) {\n        (current as any).select();\n      }\n    };\n\n    getValue() {\n      return this.state.value;\n    }\n\n    render() {\n      const { defaultValue, autoFocus, ...rest } = this.props;\n      return (\n        <NumberEditor\n          {...intlProps}\n          {...rest}\n          value={this.state.value}\n          onChange={this.handleChange}\n          select={this.select}>\n          {({ getInputProps, isInvalid }) => (\n            <Input\n              {...getInputProps()}\n              error={isInvalid}\n              ref={this.input}\n              icon={isInvalid && errorIcon}\n              iconPosition=\"left\" />\n          )}\n        </NumberEditor>\n      );\n    }\n  };\n}\n\nexport const GridDecimalEditor = gridNumberEditorFactory({\n  style: intlStyle.DECIMAL\n});\nexport const GridPercentEditor = gridNumberEditorFactory({\n  style: intlStyle.PERCENT\n});\nexport const GridCurrencyEditor = gridNumberEditorFactory<\n  GridCurrencyEditorProps\n>({ style: intlStyle.CURRENCY });\n","/* eslint-disable react/style-prop-object */\nimport * as React from \"react\";\nimport { FormattedNumber, injectIntl, InjectedIntlProps } from \"react-intl\";\n\nimport { getDefaultFractionDigitsForLocale, intlStyle } from \"./IntlUtils\";\n\ntype Omit<T, K extends keyof T> = Pick<T, Exclude<keyof T, K>>;\n\nexport interface IntegerFormatterProps {\n  // TODO: should it be a string and parsed before formatting?\n  value: number | undefined | null;\n}\n\ninterface FormatterProps extends IntegerFormatterProps {\n  /**\n   * The minimum number of fraction digits to use. Possible values are from 0 to 20;\n   * the default for plain number and percent formatting is 0; the default for currency\n   * formatting is the number of minor unit digits provided by the ISO 4217 currency code list\n   */\n  minimumFractionDigits?: number;\n\n  /**\n   * The maximum number of fraction digits to use. Possible values are from 0 to 20;\n   * the default for plain number formatting is the larger of minimumFractionDigits and 3;\n   * the default for currency formatting is the larger of minimumFractionDigits and\n   * the number of minor unit digits provided by the ISO 4217 currency code list\n   */\n  maximumFractionDigits?: number;\n}\n\nexport interface CurrencyFormatterProps extends FormatterProps {\n  /**\n   * The currency to use in currency formatting. Possible values are the ISO 4217 currency codes,\n   * such as \"USD\" for the US dollar, \"EUR\" for the euro, or \"CNY\" for the Chinese RMB\n   */\n  currency: string;\n}\n\ntype NumberFormatterProps = Omit<FormattedNumber.Props, \"value\"> &\n  IntegerFormatterProps;\nexport type DecimalFormatterProps = FormatterProps;\nexport type PercentFormatterProps = FormatterProps;\ntype RateFormatterBaseProps = CurrencyFormatterProps & InjectedIntlProps;\n\nexport function getDefaultFractionDigits(\n  { minimumFractionDigits, maximumFractionDigits }: NumberFormatterProps,\n  defaultFractionDigits: number | (() => number)\n) {\n  const extraProps: Partial<FormattedNumber.Props> = {};\n  if (\n    typeof minimumFractionDigits === \"undefined\" &&\n    typeof maximumFractionDigits === \"undefined\"\n  ) {\n    // Currently the default value is only set when both minimum and maximum fraction digits are not specified.\n    // Do we need to handle default values of individual fraction digits?\n    const defaultDigits =\n      typeof defaultFractionDigits === \"function\"\n        ? defaultFractionDigits()\n        : defaultFractionDigits;\n\n    extraProps.minimumFractionDigits = defaultDigits;\n    extraProps.maximumFractionDigits = defaultDigits;\n  }\n\n  return extraProps;\n}\n\nfunction NumberFormatter({ value, ...rest }: NumberFormatterProps) {\n  return value != null ? <FormattedNumber value={value} {...rest} /> : null;\n}\n\nexport function DecimalFormatter(props: DecimalFormatterProps) {\n  const extraProps = getDefaultFractionDigits(props, 2);\n  return (\n    <NumberFormatter {...props} {...extraProps} style={intlStyle.DECIMAL} />\n  );\n}\n\nexport function IntegerFormatter(props: IntegerFormatterProps) {\n  return <DecimalFormatter {...props} maximumFractionDigits={0} />;\n}\n\nexport function CurrencyFormatter(props: CurrencyFormatterProps) {\n  return <NumberFormatter {...props} style={intlStyle.CURRENCY} />;\n}\n\nexport function PercentFormatter(props: PercentFormatterProps) {\n  const extraProps = getDefaultFractionDigits(props, 2);\n  return (\n    <NumberFormatter {...props} {...extraProps} style={intlStyle.PERCENT} />\n  );\n}\n\nfunction RateFormatterBase({ intl, ...props }: RateFormatterBaseProps) {\n  // Rates are shown with 2 positions more than the default minimum fraction digits, e.g. 4 for pound, 2 for krona\n  const extraProps = getDefaultFractionDigits(\n    props,\n    () =>\n      getDefaultFractionDigitsForLocale(intl.locale, props.currency)\n        .minimumFractionDigits + 2\n  );\n  return <CurrencyFormatter {...props} {...extraProps} />;\n}\n\nexport const RateFormatter = injectIntl(RateFormatterBase);\n","import './index.css';\nimport * as React from \"react\";\nimport { render } from \"react-dom\";\nimport { IntlProvider, addLocaleData } from \"react-intl\";\n\nimport {\n  GridDecimalEditor,\n  GridCurrencyEditor,\n  GridPercentEditor\n} from \"./IntlEditors\";\n\nimport {\n  DecimalFormatter,\n  CurrencyFormatter,\n  PercentFormatter,\n  RateFormatter\n} from \"./IntlFormatters\";\n\nconst en = require(\"react-intl/locale-data/en\");\nconst fr = require(\"react-intl/locale-data/fr\");\nconst is = require(\"react-intl/locale-data/is\");\n\naddLocaleData([...en, ...fr, ...is]);\n\nclass Editors extends React.Component {\n  state = {\n    locale: \"en-US\",\n    minimumFractionDigits: 3,\n    maximumFractionDigits: 4,\n    currencyCode: \"USD\"\n  };\n  handleChange = e => {\n    const value = e.target.value === \"\" ? undefined : e.target.value;\n    this.setState({ [e.target.name]: value });\n  };\n\n  public render() {\n    return (\n      <IntlProvider locale={this.state.locale} key={this.state.locale}>\n        <div>\n          <fieldset>\n            <legend>Editors</legend>\n            <div style={{ margin: 20 }}>\n              <div style={{ marginTop: 20 }}>\n                <label>\n                  Locale:\n                  <select\n                    name=\"locale\"\n                    value={this.state.locale}\n                    onChange={this.handleChange}\n                  >\n                    <option value=\"fr-FR\">fr-FR</option>\n                    <option value=\"en-US\">en-US</option>\n                    <option value=\"en-GB\">en-GB</option>\n                    <option value=\"is-IS\">is-IS</option>\n                  </select>\n                </label>\n              </div>\n              <div style={{ marginTop: 20 }}>\n                <label>\n                  minimumFractionDigits:\n                  <input\n                    type=\"number\"\n                    name=\"minimumFractionDigits\"\n                    value={this.state.minimumFractionDigits}\n                    onChange={this.handleChange}\n                  />\n                </label>\n              </div>\n              <div style={{ marginTop: 20 }}>\n                <label>\n                  maximumFractionDigits:\n                  <input\n                    type=\"number\"\n                    name=\"maximumFractionDigits\"\n                    value={this.state.maximumFractionDigits}\n                    onChange={this.handleChange}\n                  />\n                </label>\n              </div>\n              <div style={{ marginTop: 20 }}>\n                <label>\n                  currency code:\n                  <input\n                    type=\"text\"\n                    name=\"currencyCode\"\n                    value={this.state.currencyCode}\n                    onChange={this.handleChange}\n                  />\n                </label>\n              </div>\n              <div style={{ marginTop: 20 }}>\n                <label>\n                  Grid Decimal Editor:\n                  <GridDecimalEditor\n                    defaultValue={2}\n                    minimumFractionDigits={this.state.minimumFractionDigits}\n                    maximumFractionDigits={this.state.maximumFractionDigits}\n                  />\n                </label>\n              </div>\n              <div style={{ marginTop: 20 }}>\n                <label>\n                  Grid Currency Editor:\n                  <GridCurrencyEditor\n                    defaultValue={2}\n                    currency={this.state.currencyCode}\n                    minimumFractionDigits={this.state.minimumFractionDigits}\n                    maximumFractionDigits={this.state.maximumFractionDigits}\n                  />\n                </label>\n              </div>\n              <div style={{ marginTop: 20 }}>\n                <label>\n                  Grid Percent Editor:\n                  <GridPercentEditor\n                    defaultValue={2}\n                    minimumFractionDigits={this.state.minimumFractionDigits}\n                    maximumFractionDigits={this.state.maximumFractionDigits}\n                  />\n                </label>\n              </div>\n            </div>\n          </fieldset>\n        </div>\n      </IntlProvider>\n    );\n  }\n}\n\nclass Formatters extends React.Component {\n  state = {\n    locale: \"en-US\",\n    minimumFractionDigits: 3,\n    maximumFractionDigits: 4,\n    currencyCode: \"USD\",\n    currencyFormatterValue: 2,\n    decimalFormatterValue: 1.2,\n    percentFormatterValue: 0.2,\n    rateFormatterValue: 3.4\n  };\n  handleChange = e => {\n    const value = e.target.value === \"\" ? undefined : e.target.value;\n    this.setState({ [e.target.name]: value });\n  };\n\n  public render() {\n    return (\n      <IntlProvider locale={this.state.locale} key={this.state.locale}>\n        <div>\n          <fieldset>\n            <legend>Formatters</legend>\n            <div style={{ margin: 20 }}>\n              <div style={{ marginTop: 20 }}>\n                <label>\n                  Locale:\n                  <select\n                    name=\"locale\"\n                    value={this.state.locale}\n                    onChange={this.handleChange}\n                  >\n                    <option value=\"fr-FR\">fr-FR</option>\n                    <option value=\"en-US\">en-US</option>\n                    <option value=\"en-GB\">en-GB</option>\n                    <option value=\"is-IS\">is-IS</option>\n                  </select>\n                </label>\n              </div>\n              <div style={{ marginTop: 20 }}>\n                <label>\n                  minimumFractionDigits:\n                  <input\n                    type=\"number\"\n                    name=\"minimumFractionDigits\"\n                    value={this.state.minimumFractionDigits}\n                    onChange={this.handleChange}\n                  />\n                </label>\n              </div>\n              <div style={{ marginTop: 20 }}>\n                <label>\n                  maximumFractionDigits:\n                  <input\n                    type=\"number\"\n                    name=\"maximumFractionDigits\"\n                    value={this.state.maximumFractionDigits}\n                    onChange={this.handleChange}\n                  />\n                </label>\n              </div>\n              <div style={{ marginTop: 20 }}>\n                <label>\n                  currency code:\n                  <input\n                    type=\"text\"\n                    name=\"currencyCode\"\n                    value={this.state.currencyCode}\n                    onChange={this.handleChange}\n                  />\n                </label>\n              </div>\n\n              <div style={{ marginTop: 20 }}>\n                <label>\n                  Decimal Formatter:\n                  <input\n                    type=\"number\"\n                    name=\"decimalFormatterValue\"\n                    value={this.state.decimalFormatterValue}\n                    onChange={this.handleChange}\n                  />\n                  <DecimalFormatter\n                    value={this.state.decimalFormatterValue}\n                    minimumFractionDigits={this.state.minimumFractionDigits}\n                    maximumFractionDigits={this.state.maximumFractionDigits}\n                  />\n                </label>\n              </div>\n\n              <div style={{ marginTop: 20 }}>\n                <label>\n                  CurrencyFormatter:\n                  <input\n                    type=\"number\"\n                    name=\"currencyFormatterValue\"\n                    value={this.state.currencyFormatterValue}\n                    onChange={this.handleChange}\n                  />\n                  <CurrencyFormatter\n                    value={this.state.currencyFormatterValue}\n                    currency={this.state.currencyCode}\n                    minimumFractionDigits={this.state.minimumFractionDigits}\n                    maximumFractionDigits={this.state.maximumFractionDigits}\n                  />\n                </label>\n              </div>\n\n              <div style={{ marginTop: 20 }}>\n                <label>\n                  PercentFormatter:\n                  <input\n                    type=\"number\"\n                    name=\"percentFormatterValue\"\n                    value={this.state.percentFormatterValue}\n                    onChange={this.handleChange}\n                  />\n                  <PercentFormatter\n                    value={this.state.percentFormatterValue}\n                    minimumFractionDigits={this.state.minimumFractionDigits}\n                    maximumFractionDigits={this.state.maximumFractionDigits}\n                  />\n                </label>\n              </div>\n\n              <div style={{ marginTop: 20 }}>\n                <label>\n                  Rate Formatter:\n                  <input\n                    type=\"number\"\n                    name=\"rateFormatterValue\"\n                    value={this.state.rateFormatterValue}\n                    onChange={this.handleChange}\n                  />\n                  <RateFormatter\n                    value={this.state.rateFormatterValue}\n                    currency={this.state.currencyCode}\n                    minimumFractionDigits={this.state.minimumFractionDigits}\n                    maximumFractionDigits={this.state.maximumFractionDigits}\n                  />\n                </label>\n              </div>\n            </div>\n          </fieldset>\n        </div>\n      </IntlProvider>\n    );\n  }\n}\n\nrender(\n  <div>\n    <Editors />\n    <Formatters />\n  </div>,\n  document.getElementById(\"root\")\n);"],"sourceRoot":""}