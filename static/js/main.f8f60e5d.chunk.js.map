{"version":3,"sources":["IntlUtils.tsx","IntlEditors.tsx","IntlFormatters.tsx","index.tsx"],"names":["getNumberFormat","memoizeIntlConstructor","Intl","NumberFormat","intlStyle","DECIMAL","PERCENT","CURRENCY","getDefaultFractionDigitsForLocale","locale","currency","_numberFormat$resolve","style","resolvedOptions","minimumFractionDigits","maximumFractionDigits","DECIMAL_SEPARATORS","DECIMAL_REGEX","NUMBER_REGEX","replaceDecimalSeparator","value","separator","toString","replace","NumberEditorBase","decimalSeparator","formatNumber","_this","props","intl","defaultMaximumFractionDigits","state","getInitialState","isCopyPaste","setValue","setState","isControlled","onChange","showLastValidValue","isInvalid","getValue","displayValue","handleCopyPaste","pastedValue","parsedValue","trim","regex","RegExp","concat","parseFloat","Number","isNaN","undefined","parseDecimal","isPastedValueValid","handleChange","_ref","target","test","some","s","includes","length","_this$props$maximumFr","_displayValue$split","split","_displayValue$split2","Object","slicedToArray","displayValueIntegerPart","displayValueDecimalPart","roundedDisplayValue","slice","handleFocus","isFocused","handleBlur","handleClick","handleKeyDown","e","ctrlKey","keyCode","handlePaste","console","log","getRenderProps","_this$state","inputProps","formatValue","onFocus","onBlur","onKeyDown","onClick","onPaste","_this$props","this","autoFocus","focus","select","_this$props2","_this2","allowedFormatOptions","_this$props$maximumFr2","fractionDigits","push","options","allowedValue","stringToWorkOn","stringToReplace","stringToReplaceWith","ignoreCase","arguments","re","replaceAll","defaultValue","getInitialValue","children","React","NumberEditor","injectIntl","withRef","errorIcon","react","Icon","name","link","gridNumberEditorFactory","intlProps","_React$Component2","GridNumberEditor","_getPrototypeOf3","_this3","classCallCheck","_len2","args","Array","_key2","possibleConstructorReturn","getPrototypeOf","call","apply","decimalEditor","input","current","inherits","createClass","key","ref","innerRef","getWrappedInstance","_this4","assign","_ref2","Input","icon","iconPosition","GridDecimalEditor","GridPercentEditor","GridCurrencyEditor","getDefaultFractionDigits","defaultFractionDigits","extraProps","defaultDigits","NumberFormatter","rest","objectWithoutProperties","index_es","DecimalFormatter","CurrencyFormatter","PercentFormatter","RateFormatter","_ref3","en","require","fr","is","addLocaleData","toConsumableArray","Editors","currencyCode","defineProperty","margin","marginTop","type","Formatters","currencyFormatterValue","decimalFormatterValue","percentFormatterValue","rateFormatterValue","render","src_Editors","src_Formatters","document","getElementById"],"mappings":"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","file":"static/js/main.f8f60e5d.chunk.js","sourcesContent":["import { InjectedIntl } from \"react-intl\";\nimport memoizeIntlConstructor from \"intl-format-cache\";\n\n// Use a memoized formatter as creating instances of Intl formats is an expensive operation\nconst getNumberFormat = memoizeIntlConstructor(Intl.NumberFormat);\n\nexport const intlStyle = {\n  DECIMAL: \"decimal\",\n  PERCENT: \"percent\",\n  CURRENCY: \"currency\"\n};\n\n// Find the default minimum fraction digits for a locale and currency code\nexport function getDefaultFractionDigitsForLocale(\n  locale: string,\n  currency?: string\n) {\n  const style = typeof currency === \"string\" ? \"currency\" : \"decimal\";\n  const numberFormat = getNumberFormat(locale, { currency, style });\n  const {\n    minimumFractionDigits,\n    maximumFractionDigits\n  } = numberFormat.resolvedOptions();\n  return { minimumFractionDigits, maximumFractionDigits };\n}\n\nexport function getDecimalSeparator({ formatNumber }: InjectedIntl) {\n  const testValue = formatNumber(1.1);\n  return testValue[1];\n}\n\nexport function parseDecimal(value: unknown, decimalSeparator: string) {\n  // Return the value as-is if it's already a number\n  if (typeof value === \"number\") {\n    return value;\n  }\n\n  if (typeof value === \"string\") {\n    if (value.trim() === \"\") {\n      return undefined;\n    }\n\n    // Build regex to strip out everything except digits and decimal point\n    const regex = new RegExp(`[^0-9${decimalSeparator}]`, \"g\");\n    const parsedValue = parseFloat(\n      value\n        .replace(regex, \"\") // strip out any cruft\n        .replace(decimalSeparator, \".\") // make sure decimal point is standard\n    );\n\n    return !Number.isNaN(parsedValue) ? parsedValue : undefined;\n  }\n\n  // TODO: What should be the default value?\n  return undefined;\n}\n","import * as React from \"react\";\nimport { injectIntl, InjectedIntlProps } from \"react-intl\";\nimport { Icon, Input } from \"semantic-ui-react\";\n\nimport {\n  getDecimalSeparator,\n  getDefaultFractionDigitsForLocale,\n  parseDecimal,\n  intlStyle\n} from \"./IntlUtils\";\n\nconst NBSP = \"\\u00A0\";\nconst DECIMAL_SEPARATORS = [\".\", \",\"];\nconst DECIMAL_REGEX = /[.,]/;\nconst NUMBER_REGEX = /^\\d*[.,]?\\d*$/;\n\nexport const replaceAll = (\n  stringToWorkOn: string,\n  stringToReplace: string,\n  stringToReplaceWith: string,\n  ignoreCase = false\n): string => {\n  const re = new RegExp(\n    stringToReplace.replace(/([/,!\\\\^${}[\\]().*+?|<>\\-&])/g, \"\\\\$&\"),\n    ignoreCase ? \"gi\" : \"g\"\n  );\n  stringToReplaceWith =\n    typeof stringToReplaceWith === \"string\"\n      ? stringToReplaceWith.replace(/\\$/g, \"$$$$\")\n      : stringToReplaceWith;\n  return stringToWorkOn.replace(re, stringToReplaceWith);\n};\n\ninterface NumberEditorProps extends Intl.NumberFormatOptions {\n  value?: number;\n  defaultValue?: number;\n  autoFocus?: boolean;\n  onChange?: (value?: number) => void;\n  focus?: () => void;\n  select?: () => void;\n  children: (\n    renderProps: {\n      isInvalid: boolean;\n      inputProps: Pick<\n        React.InputHTMLAttributes<HTMLInputElement>,\n        | \"value\"\n        | \"onChange\"\n        | \"onFocus\"\n        | \"onBlur\"\n        | \"onKeyDown\"\n        | \"onClick\"\n        | \"onPaste\"\n      >;\n    }\n  ) => React.ReactNode;\n}\n\ninterface NumberEditorState {\n  value?: number;\n  displayValue: string;\n  isInvalid: boolean;\n  isFocused: boolean;\n}\n\nfunction replaceDecimalSeparator(\n  value: string | number | undefined | null,\n  separator: string\n) {\n  return value != null\n    ? value.toString().replace(DECIMAL_REGEX, separator)\n    : \"\";\n}\n\nclass NumberEditorBase extends React.Component<\n  NumberEditorProps & InjectedIntlProps,\n  NumberEditorState\n> {\n  readonly decimalSeparator = getDecimalSeparator(this.props.intl);\n  readonly defaultMaximumFractionDigits = getDefaultFractionDigitsForLocale(\n    this.props.intl.locale,\n    this.props.currency\n  ).maximumFractionDigits;\n  readonly state: Readonly<NumberEditorState> = this.getInitialState();\n\n  isCopyPaste = false;\n\n  componentDidMount() {\n    const { autoFocus, focus } = this.props;\n    if (autoFocus && focus) {\n      focus();\n    }\n  }\n\n  componentDidUpdate() {\n    if (this.state.isInvalid) {\n      // Select the value if it is invalid\n      const { select } = this.props;\n      if (select) {\n        select();\n      }\n    }\n  }\n\n  isControlled() {\n    return typeof this.props.onChange !== \"undefined\";\n  }\n\n  formatValue(value: number) {\n    const {\n      intl,\n      style,\n      currency,\n      minimumFractionDigits,\n      maximumFractionDigits\n    } = this.props;\n    return intl.formatNumber(value, {\n      style,\n      currency,\n      minimumFractionDigits,\n      maximumFractionDigits\n    });\n  }\n\n  isPastedValueValid(pastedValue: string, parsedValue: number) {\n    const allowedFormatOptions: Intl.NumberFormatOptions[] = [];\n    const { maximumFractionDigits = this.defaultMaximumFractionDigits } = this.props;\n\n    for (let fractionDigits = 0; fractionDigits <= maximumFractionDigits; fractionDigits++) {\n      allowedFormatOptions.push({\n        style: intlStyle.DECIMAL,\n        minimumFractionDigits: fractionDigits\n      });\n\n      if (this.props.style === intlStyle.CURRENCY) {\n        allowedFormatOptions.push({\n          style: intlStyle.CURRENCY,\n          currency: this.props.currency,\n          minimumFractionDigits: fractionDigits\n        });\n      }\n    }\n\n\n    // If the formatted value is same as the pasted value then it is considered valid\n    // All other values are invalid. This does not handle all the cases as it is difficult\n    // to address all the valid cases. This algorithm will be modified as needed\n    return allowedFormatOptions.some(options => {\n      const allowedValue = this.props.intl.formatNumber(parsedValue, options);\n      return pastedValue === replaceAll(allowedValue, NBSP, ' ');\n    });\n  }\n\n  getInitialValue() {\n    return this.isControlled() ? this.props.value : this.props.defaultValue;\n  }\n\n  getInitialState() {\n    const value = this.getInitialValue();\n    // TODO: can we assume initial value is valid?\n    return {\n      value,\n      displayValue: replaceDecimalSeparator(value, this.decimalSeparator),\n      isInvalid: false,\n      isFocused: false\n    };\n  }\n\n  getValue() {\n    return this.isControlled() ? this.props.value : this.state.value;\n  }\n\n  setValue = <K extends keyof NumberEditorState>(\n    state: Pick<NumberEditorState, K>\n  ) => {\n    this.setState(state, () => {\n      if (this.isControlled() && this.props.value !== this.state.value) {\n        this.props.onChange!(this.state.value);\n      }\n    });\n  };\n\n  showLastValidValue = () => {\n    if (this.state.isInvalid) {\n      const value = this.getValue();\n      this.setValue({\n        displayValue: replaceDecimalSeparator(value, this.decimalSeparator),\n        isInvalid: false\n      });\n    }\n  };\n\n  handleCopyPaste = (pastedValue: string) => {\n    this.isCopyPaste = false;\n    const parsedValue = parseDecimal(pastedValue, this.decimalSeparator);\n    const isInvalid = parsedValue == null || !this.isPastedValueValid(pastedValue, parsedValue);\n\n    if (isInvalid) {\n      // Show the invalid displayValue, we do not change the underlying value\n      // displayValue will be reverted to the last valid value on the next action (blur, click)\n      this.setValue({\n        isInvalid: true,\n        displayValue: pastedValue\n      });\n      return;\n    }\n\n    // Value is valid, show the value without any formating elements (percentage, currency symbols etc.)\n    this.setValue({\n      isInvalid: false,\n      value: parsedValue,\n      displayValue: replaceDecimalSeparator(parsedValue, this.decimalSeparator)\n    });\n  };\n\n  handleChange = ({ target }: React.ChangeEvent<HTMLInputElement>) => {\n    const { value } = target;\n\n    if (value === \"\") {\n      this.setValue({ value: undefined, displayValue: \"\" });\n      return;\n    }\n\n    if (this.isCopyPaste) {\n      this.handleCopyPaste(value);\n      return;\n    }\n\n    // Check if value is a valid number\n    if (NUMBER_REGEX.test(value)) {\n      // Check if value has a decimal separator\n      if (DECIMAL_SEPARATORS.some(s => value.includes(s))) {\n        // Replace the decimal separator as per the current locale\n        const displayValue = replaceDecimalSeparator(\n          value,\n          this.decimalSeparator\n        );\n        // Add \"0\" in front if the decimal separator is entered in empty field\n        if (displayValue.length === 1) {\n          this.setValue({ value: 0, displayValue: `0${displayValue}` });\n          return;\n        }\n\n        // Check the precision setting and set the maximum fraction digits.\n        const {\n          maximumFractionDigits = this.defaultMaximumFractionDigits\n        } = this.props;\n        const [\n          displayValueIntegerPart,\n          displayValueDecimalPart\n        ] = displayValue.split(this.decimalSeparator);\n\n        if (displayValueDecimalPart.length > maximumFractionDigits) {\n          const roundedDisplayValue = `${displayValueIntegerPart}${\n            this.decimalSeparator\n          }${displayValueDecimalPart.slice(0, maximumFractionDigits)}`;\n          this.setValue({\n            value: parseFloat(\n              replaceDecimalSeparator(roundedDisplayValue, \".\")\n            ),\n            displayValue: roundedDisplayValue\n          });\n          return;\n        }\n\n        this.setValue({\n          value: parseFloat(replaceDecimalSeparator(value, \".\")),\n          displayValue\n        });\n        return;\n      }\n\n      // Value has no decimal separator. Convert value to number and convert\n      // it back to string. This removes the leading 0 i.e 01 -> 1\n      const parsedValue = parseFloat(value);\n      this.setValue({\n        value: parsedValue,\n        displayValue: parsedValue.toString()\n      });\n    }\n\n    // Value is not a valid number so it is rejected\n  };\n\n  handleFocus = () => {\n    this.setState({ isFocused: true });\n  };\n\n  handleBlur = () => {\n    this.setState({ isFocused: false });\n    this.showLastValidValue();\n  };\n\n  handleClick = () => {\n    this.showLastValidValue();\n  };\n\n  handleKeyDown = (e: React.KeyboardEvent<HTMLInputElement>) => {\n    if (e.ctrlKey && e.keyCode === 86) {\n      this.isCopyPaste = true;\n    }\n  };\n\n  handlePaste = () => {\n    console.log('jjjj')\n    this.isCopyPaste = true;\n  };\n\n  getRenderProps = () => {\n    const { value, isInvalid, displayValue } = this.state;\n    const formattedValue =\n      !this.state.isFocused && value != null\n        ? this.formatValue(value)\n        : displayValue;\n\n    return {\n      isInvalid,\n      inputProps: {\n        value: formattedValue,\n        onChange: this.handleChange,\n        onFocus: this.handleFocus,\n        onBlur: this.handleBlur,\n        onKeyDown: this.handleKeyDown,\n        onClick: this.handleClick,\n        onPaste: this.handlePaste\n      }\n    };\n  };\n\n  render() {\n    return this.props.children(this.getRenderProps());\n  }\n}\n\nconst NumberEditor = injectIntl(NumberEditorBase, { withRef: true });\n\nconst errorMessage =\n  \"Invalid format. Only numbers and single decimal separator are allowed.\";\nconst errorIcon = <Icon name=\"exclamation circle\" link />;\n\ntype GridEditorProps = Pick<\n  NumberEditorProps,\n  | \"defaultValue\"\n  | \"minimumFractionDigits\"\n  | \"maximumFractionDigits\"\n  | \"autoFocus\"\n>;\ntype GridCurrencyEditorProps = GridEditorProps & { currency: string };\n\nfunction gridNumberEditorFactory<T extends {}>(\n  intlProps: Intl.NumberFormatOptions\n): React.ComponentClass<T & GridEditorProps> {\n  return class GridNumberEditor extends React.Component<T & GridEditorProps> {\n    decimalEditor = React.createRef<any>();\n    input = React.createRef<Input>();\n\n    focus = () => {\n      const { current } = this.input;\n      if (current != null) {\n        current.focus();\n      }\n    };\n\n    select = () => {\n      const { current } = this.input;\n      if (current != null) {\n        (current as any).select();\n      }\n    };\n\n    getValue() {\n      const ref = this.decimalEditor.current;\n      if (ref != null) {\n        const innerRef = ref.getWrappedInstance() as NumberEditorBase;\n        if (innerRef != null) {\n          return innerRef.getValue();\n        }\n      }\n\n      return undefined;\n    }\n\n    render() {\n      return (\n        <NumberEditor\n          ref={this.decimalEditor}\n          focus={this.focus}\n          select={this.select}\n          {...intlProps}\n          {...this.props}\n        >\n          {({ inputProps, isInvalid }) => (\n            <Input\n              {...inputProps}\n              ref={this.input}\n              icon={isInvalid && errorIcon}\n              iconPosition=\"left\"\n            />\n          )}\n        </NumberEditor>\n      );\n    }\n  };\n}\n\nexport const GridDecimalEditor = gridNumberEditorFactory({\n  style: intlStyle.DECIMAL\n});\nexport const GridPercentEditor = gridNumberEditorFactory({\n  style: intlStyle.PERCENT\n});\nexport const GridCurrencyEditor = gridNumberEditorFactory<\n  GridCurrencyEditorProps\n>({ style: intlStyle.CURRENCY });\n","/* eslint-disable react/style-prop-object */\nimport * as React from \"react\";\nimport { FormattedNumber, injectIntl, InjectedIntlProps } from \"react-intl\";\n\nimport { getDefaultFractionDigitsForLocale, intlStyle } from \"./IntlUtils\";\n\ntype Omit<T, K extends keyof T> = Pick<T, Exclude<keyof T, K>>;\n\nexport interface IntegerFormatterProps {\n  // TODO: should it be a string and parsed before formatting?\n  value: number | undefined | null;\n}\n\ninterface FormatterProps extends IntegerFormatterProps {\n  /**\n   * The minimum number of fraction digits to use. Possible values are from 0 to 20;\n   * the default for plain number and percent formatting is 0; the default for currency\n   * formatting is the number of minor unit digits provided by the ISO 4217 currency code list\n   */\n  minimumFractionDigits?: number;\n\n  /**\n   * The maximum number of fraction digits to use. Possible values are from 0 to 20;\n   * the default for plain number formatting is the larger of minimumFractionDigits and 3;\n   * the default for currency formatting is the larger of minimumFractionDigits and\n   * the number of minor unit digits provided by the ISO 4217 currency code list\n   */\n  maximumFractionDigits?: number;\n}\n\nexport interface CurrencyFormatterProps extends FormatterProps {\n  /**\n   * The currency to use in currency formatting. Possible values are the ISO 4217 currency codes,\n   * such as \"USD\" for the US dollar, \"EUR\" for the euro, or \"CNY\" for the Chinese RMB\n   */\n  currency: string;\n}\n\ntype NumberFormatterProps = Omit<FormattedNumber.Props, \"value\"> &\n  IntegerFormatterProps;\nexport type DecimalFormatterProps = FormatterProps;\nexport type PercentFormatterProps = FormatterProps;\ntype RateFormatterBaseProps = CurrencyFormatterProps & InjectedIntlProps;\n\nexport function getDefaultFractionDigits(\n  { minimumFractionDigits, maximumFractionDigits }: NumberFormatterProps,\n  defaultFractionDigits: number | (() => number)\n) {\n  const extraProps: Partial<FormattedNumber.Props> = {};\n  if (\n    typeof minimumFractionDigits === \"undefined\" &&\n    typeof maximumFractionDigits === \"undefined\"\n  ) {\n    // Currently the default value is only set when both minimum and maximum fraction digits are not specified.\n    // Do we need to handle default values of individual fraction digits?\n    const defaultDigits =\n      typeof defaultFractionDigits === \"function\"\n        ? defaultFractionDigits()\n        : defaultFractionDigits;\n\n    extraProps.minimumFractionDigits = defaultDigits;\n    extraProps.maximumFractionDigits = defaultDigits;\n  }\n\n  return extraProps;\n}\n\nfunction NumberFormatter({ value, ...rest }: NumberFormatterProps) {\n  return value != null ? <FormattedNumber value={value} {...rest} /> : null;\n}\n\nexport function DecimalFormatter(props: DecimalFormatterProps) {\n  const extraProps = getDefaultFractionDigits(props, 2);\n  return (\n    <NumberFormatter {...props} {...extraProps} style={intlStyle.DECIMAL} />\n  );\n}\n\nexport function IntegerFormatter(props: IntegerFormatterProps) {\n  return <DecimalFormatter {...props} maximumFractionDigits={0} />;\n}\n\nexport function CurrencyFormatter(props: CurrencyFormatterProps) {\n  return <NumberFormatter {...props} style={intlStyle.CURRENCY} />;\n}\n\nexport function PercentFormatter(props: PercentFormatterProps) {\n  const extraProps = getDefaultFractionDigits(props, 2);\n  return (\n    <NumberFormatter {...props} {...extraProps} style={intlStyle.PERCENT} />\n  );\n}\n\nfunction RateFormatterBase({ intl, ...props }: RateFormatterBaseProps) {\n  // Rates are shown with 2 positions more than the default minimum fraction digits, e.g. 4 for pound, 2 for krona\n  const extraProps = getDefaultFractionDigits(\n    props,\n    () =>\n      getDefaultFractionDigitsForLocale(intl.locale, props.currency)\n        .minimumFractionDigits + 2\n  );\n  return <CurrencyFormatter {...props} {...extraProps} />;\n}\n\nexport const RateFormatter = injectIntl(RateFormatterBase);\n","import './index.css';\nimport * as React from \"react\";\nimport { render } from \"react-dom\";\nimport { IntlProvider, addLocaleData } from \"react-intl\";\n\nimport {\n  GridDecimalEditor,\n  GridCurrencyEditor,\n  GridPercentEditor\n} from \"./IntlEditors\";\n\nimport {\n  DecimalFormatter,\n  CurrencyFormatter,\n  PercentFormatter,\n  RateFormatter\n} from \"./IntlFormatters\";\n\nconst en = require(\"react-intl/locale-data/en\");\nconst fr = require(\"react-intl/locale-data/fr\");\nconst is = require(\"react-intl/locale-data/is\");\n\naddLocaleData([...en, ...fr, ...is]);\n\nclass Editors extends React.Component {\n  state = {\n    locale: \"en-US\",\n    minimumFractionDigits: 3,\n    maximumFractionDigits: 4,\n    currencyCode: \"USD\"\n  };\n  handleChange = e => {\n    const value = e.target.value === \"\" ? undefined : e.target.value;\n    this.setState({ [e.target.name]: value });\n  };\n\n  public render() {\n    return (\n      <IntlProvider locale={this.state.locale} key={this.state.locale}>\n        <div>\n          <fieldset>\n            <legend>Editors</legend>\n            <div style={{ margin: 20 }}>\n              <div style={{ marginTop: 20 }}>\n                <label>\n                  Locale:\n                  <select\n                    name=\"locale\"\n                    value={this.state.locale}\n                    onChange={this.handleChange}\n                  >\n                    <option value=\"fr-FR\">fr-FR</option>\n                    <option value=\"en-US\">en-US</option>\n                    <option value=\"en-GB\">en-GB</option>\n                    <option value=\"is-IS\">is-IS</option>\n                  </select>\n                </label>\n              </div>\n              <div style={{ marginTop: 20 }}>\n                <label>\n                  minimumFractionDigits:\n                  <input\n                    type=\"number\"\n                    name=\"minimumFractionDigits\"\n                    value={this.state.minimumFractionDigits}\n                    onChange={this.handleChange}\n                  />\n                </label>\n              </div>\n              <div style={{ marginTop: 20 }}>\n                <label>\n                  maximumFractionDigits:\n                  <input\n                    type=\"number\"\n                    name=\"maximumFractionDigits\"\n                    value={this.state.maximumFractionDigits}\n                    onChange={this.handleChange}\n                  />\n                </label>\n              </div>\n              <div style={{ marginTop: 20 }}>\n                <label>\n                  currency code:\n                  <input\n                    type=\"text\"\n                    name=\"currencyCode\"\n                    value={this.state.currencyCode}\n                    onChange={this.handleChange}\n                  />\n                </label>\n              </div>\n              <div style={{ marginTop: 20 }}>\n                <label>\n                  Grid Decimal Editor:\n                  <GridDecimalEditor\n                    defaultValue={2}\n                    minimumFractionDigits={this.state.minimumFractionDigits}\n                    maximumFractionDigits={this.state.maximumFractionDigits}\n                  />\n                </label>\n              </div>\n              <div style={{ marginTop: 20 }}>\n                <label>\n                  Grid Currency Editor:\n                  <GridCurrencyEditor\n                    defaultValue={2}\n                    currency={this.state.currencyCode}\n                    minimumFractionDigits={this.state.minimumFractionDigits}\n                    maximumFractionDigits={this.state.maximumFractionDigits}\n                  />\n                </label>\n              </div>\n              <div style={{ marginTop: 20 }}>\n                <label>\n                  Grid Percent Editor:\n                  <GridPercentEditor\n                    defaultValue={2}\n                    minimumFractionDigits={this.state.minimumFractionDigits}\n                    maximumFractionDigits={this.state.maximumFractionDigits}\n                  />\n                </label>\n              </div>\n            </div>\n          </fieldset>\n        </div>\n      </IntlProvider>\n    );\n  }\n}\n\nclass Formatters extends React.Component {\n  state = {\n    locale: \"en-US\",\n    minimumFractionDigits: 3,\n    maximumFractionDigits: 4,\n    currencyCode: \"USD\",\n    currencyFormatterValue: 2,\n    decimalFormatterValue: 1.2,\n    percentFormatterValue: 0.2,\n    rateFormatterValue: 3.4\n  };\n  handleChange = e => {\n    const value = e.target.value === \"\" ? undefined : e.target.value;\n    this.setState({ [e.target.name]: value });\n  };\n\n  public render() {\n    return (\n      <IntlProvider locale={this.state.locale} key={this.state.locale}>\n        <div>\n          <fieldset>\n            <legend>Formatters</legend>\n            <div style={{ margin: 20 }}>\n              <div style={{ marginTop: 20 }}>\n                <label>\n                  Locale:\n                  <select\n                    name=\"locale\"\n                    value={this.state.locale}\n                    onChange={this.handleChange}\n                  >\n                    <option value=\"fr-FR\">fr-FR</option>\n                    <option value=\"en-US\">en-US</option>\n                    <option value=\"en-GB\">en-GB</option>\n                    <option value=\"is-IS\">is-IS</option>\n                  </select>\n                </label>\n              </div>\n              <div style={{ marginTop: 20 }}>\n                <label>\n                  minimumFractionDigits:\n                  <input\n                    type=\"number\"\n                    name=\"minimumFractionDigits\"\n                    value={this.state.minimumFractionDigits}\n                    onChange={this.handleChange}\n                  />\n                </label>\n              </div>\n              <div style={{ marginTop: 20 }}>\n                <label>\n                  maximumFractionDigits:\n                  <input\n                    type=\"number\"\n                    name=\"maximumFractionDigits\"\n                    value={this.state.maximumFractionDigits}\n                    onChange={this.handleChange}\n                  />\n                </label>\n              </div>\n              <div style={{ marginTop: 20 }}>\n                <label>\n                  currency code:\n                  <input\n                    type=\"text\"\n                    name=\"currencyCode\"\n                    value={this.state.currencyCode}\n                    onChange={this.handleChange}\n                  />\n                </label>\n              </div>\n\n              <div style={{ marginTop: 20 }}>\n                <label>\n                  Decimal Formatter:\n                  <input\n                    type=\"number\"\n                    name=\"decimalFormatterValue\"\n                    value={this.state.decimalFormatterValue}\n                    onChange={this.handleChange}\n                  />\n                  <DecimalFormatter\n                    value={this.state.decimalFormatterValue}\n                    minimumFractionDigits={this.state.minimumFractionDigits}\n                    maximumFractionDigits={this.state.maximumFractionDigits}\n                  />\n                </label>\n              </div>\n\n              <div style={{ marginTop: 20 }}>\n                <label>\n                  CurrencyFormatter:\n                  <input\n                    type=\"number\"\n                    name=\"currencyFormatterValue\"\n                    value={this.state.currencyFormatterValue}\n                    onChange={this.handleChange}\n                  />\n                  <CurrencyFormatter\n                    value={this.state.currencyFormatterValue}\n                    currency={this.state.currencyCode}\n                    minimumFractionDigits={this.state.minimumFractionDigits}\n                    maximumFractionDigits={this.state.maximumFractionDigits}\n                  />\n                </label>\n              </div>\n\n              <div style={{ marginTop: 20 }}>\n                <label>\n                  PercentFormatter:\n                  <input\n                    type=\"number\"\n                    name=\"percentFormatterValue\"\n                    value={this.state.percentFormatterValue}\n                    onChange={this.handleChange}\n                  />\n                  <PercentFormatter\n                    value={this.state.percentFormatterValue}\n                    minimumFractionDigits={this.state.minimumFractionDigits}\n                    maximumFractionDigits={this.state.maximumFractionDigits}\n                  />\n                </label>\n              </div>\n\n              <div style={{ marginTop: 20 }}>\n                <label>\n                  Rate Formatter:\n                  <input\n                    type=\"number\"\n                    name=\"rateFormatterValue\"\n                    value={this.state.rateFormatterValue}\n                    onChange={this.handleChange}\n                  />\n                  <RateFormatter\n                    value={this.state.rateFormatterValue}\n                    currency={this.state.currencyCode}\n                    minimumFractionDigits={this.state.minimumFractionDigits}\n                    maximumFractionDigits={this.state.maximumFractionDigits}\n                  />\n                </label>\n              </div>\n            </div>\n          </fieldset>\n        </div>\n      </IntlProvider>\n    );\n  }\n}\n\nrender(\n  <div>\n    <Editors />\n    <Formatters />\n  </div>,\n  document.getElementById(\"root\")\n);"],"sourceRoot":""}