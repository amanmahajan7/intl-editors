{"version":3,"sources":["currenyCode.ts","IntlUtils.tsx","IntlEditors.tsx","IntlFormatters.tsx","index.tsx"],"names":["currencyCode","getNumberFormat","memoizeIntlConstructor","Intl","NumberFormat","intlStyle","DECIMAL","PERCENT","CURRENCY","defaultFractionDigits","extraFractionDigits","RATE","TECH_RATE","getDefaultFractionDigitsForLocale","locale","options","_numberFormat$resolve","resolvedOptions","minimumFractionDigits","maximumFractionDigits","DECIMAL_REGEX","NUMBER_REGEX","replaceDecimalSeparator","value","separator","toString","replace","NumberEditorBase","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","decimalSeparator","state","input","React","isCopyPaste","internalSetState","stateToSet","style","isValueChanged","hasOwnProperty","_ref","objectWithoutProperties","setState","valueToSave","onChange","handleCopyPaste","pastedValue","parsedValue","trim","regex","RegExp","concat","parseFloat","Number","isNaN","parseNumber","isPastedValueValid","displayValue","isInvalid","handleChange","_ref2","target","test","isInteger","length","assertThisInitialized","_displayValue$split","split","_displayValue$split2","slicedToArray","displayValueIntegerPart","displayValueDecimalPart","roundedDisplayValue","slice","undefined","handleFocus","isFocused","handleBlur","getDisplayValue","handleClick","handleKeyDown","e","ctrlKey","metaKey","altKey","keyCode","handlePaste","getInputProps","_this$props","name","title","tabIndex","disabled","readOnly","_this$state","inputValue","formatValue","ref","onFocus","onBlur","onKeyDown","onClick","onPaste","_this$props2","intl","currency","minimumFractionDigitsForStyle","_getDefaultFractionDi2","minimumFractionDigitsForLocale","maximumFractionDigitsForLocale","formatNumber","getInitialState","autoFocus","current","focus","prevProps","prevState","_this$state2","select","_this$props3","valueToTest","stringToWorkOn","stringToReplace","stringToReplaceWith","ignoreCase","arguments","re","replaceAll","_this$props4","fractionDigits","decimalOptions","testPastedValue","objectSpread","useGrouping","currencyOptions","percentOptions","_this$props5","getValue","children","getRenderProps","NumberEditor","injectIntl","errorMessage","errorIcon","react","Icon","link","DefaultGridNumberInput","_ref3","Input","assign","className","icon","iconPosition","gridNumberEditorFactory","intlProps","_React$Component2","GridNumberEditor","_getPrototypeOf2","_this2","_len","args","Array","_key","apply","defaultValue","inherits","createClass","key","_this$props6","rest","p","GridIntegerEditor","GridDecimalEditor","GridPercentEditor","GridCurrencyEditor","GridRateEditor","DefaultFormNumberInput","_ref4","display","error","formNumberEditorFactory","_ref5","NumberFormatter","index_es","DecimalFormatter","PercentFormatter","CurrencyFormatter","DefaultCurrencyFormatter","RateFormatter","TechRateFormatter","en","require","fr","is","addLocaleData","toConsumableArray","Editors","defineProperty","margin","marginTop","type","sort","map","c","Formatters","currencyFormatterValue","decimalFormatterValue","percentFormatterValue","rateFormatterValue","techRateFormatterValue","App","console","log","src_Editors","src_Formatters","render","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.326cb23c.chunk.js","sourcesContent":["export const currencyCode = [\r\n    'AFN',\r\n    'EUR',\r\n    'ALL',\r\n    'DZD',\r\n    'USD',\r\n    'EUR',\r\n    'AOA',\r\n    'XCD',\r\n    'XCD',\r\n    'ARS',\r\n    'AMD',\r\n    'AWG',\r\n    'AUD',\r\n    'EUR',\r\n    'AZN',\r\n    'BSD',\r\n    'BHD',\r\n    'BDT',\r\n    'BBD',\r\n    'BYN',\r\n    'EUR',\r\n    'BZD',\r\n    'XOF',\r\n    'BMD',\r\n    'INR',\r\n    'BTN',\r\n    'BOB',\r\n    'BOV',\r\n    'USD',\r\n    'BAM',\r\n    'BWP',\r\n    'NOK',\r\n    'BRL',\r\n    'USD',\r\n    'BND',\r\n    'BGN',\r\n    'XOF',\r\n    'BIF',\r\n    'CVE',\r\n    'KHR',\r\n    'XAF',\r\n    'CAD',\r\n    'KYD',\r\n    'XAF',\r\n    'XAF',\r\n    'CLP',\r\n    'CLF',\r\n    'CNY',\r\n    'AUD',\r\n    'AUD',\r\n    'COP',\r\n    'COU',\r\n    'KMF',\r\n    'CDF',\r\n    'XAF',\r\n    'NZD',\r\n    'CRC',\r\n    'XOF',\r\n    'HRK',\r\n    'CUP',\r\n    'CUC',\r\n    'ANG',\r\n    'EUR',\r\n    'CZK',\r\n    'DKK',\r\n    'DJF',\r\n    'XCD',\r\n    'DOP',\r\n    'USD',\r\n    'EGP',\r\n    'SVC',\r\n    'USD',\r\n    'XAF',\r\n    'ERN',\r\n    'EUR',\r\n    'ETB',\r\n    'EUR',\r\n    'FKP',\r\n    'DKK',\r\n    'FJD',\r\n    'EUR',\r\n    'EUR',\r\n    'EUR',\r\n    'XPF',\r\n    'EUR',\r\n    'XAF',\r\n    'GMD',\r\n    'GEL',\r\n    'EUR',\r\n    'GHS',\r\n    'GIP',\r\n    'EUR',\r\n    'DKK',\r\n    'XCD',\r\n    'EUR',\r\n    'USD',\r\n    'GTQ',\r\n    'GBP',\r\n    'GNF',\r\n    'XOF',\r\n    'GYD',\r\n    'HTG',\r\n    'USD',\r\n    'AUD',\r\n    'EUR',\r\n    'HNL',\r\n    'HKD',\r\n    'HUF',\r\n    'ISK',\r\n    'INR',\r\n    'IDR',\r\n    'XDR',\r\n    'IRR',\r\n    'IQD',\r\n    'EUR',\r\n    'GBP',\r\n    'ILS',\r\n    'EUR',\r\n    'JMD',\r\n    'JPY',\r\n    'GBP',\r\n    'JOD',\r\n    'KZT',\r\n    'KES',\r\n    'AUD',\r\n    'KPW',\r\n    'KRW',\r\n    'KWD',\r\n    'KGS',\r\n    'LAK',\r\n    'EUR',\r\n    'LBP',\r\n    'LSL',\r\n    'ZAR',\r\n    'LRD',\r\n    'LYD',\r\n    'CHF',\r\n    'EUR',\r\n    'EUR',\r\n    'MOP',\r\n    'MKD',\r\n    'MGA',\r\n    'MWK',\r\n    'MYR',\r\n    'MVR',\r\n    'XOF',\r\n    'EUR',\r\n    'USD',\r\n    'EUR',\r\n    'MRU',\r\n    'MUR',\r\n    'EUR',\r\n    'XUA',\r\n    'MXN',\r\n    'MXV',\r\n    'USD',\r\n    'MDL',\r\n    'EUR',\r\n    'MNT',\r\n    'EUR',\r\n    'XCD',\r\n    'MAD',\r\n    'MZN',\r\n    'MMK',\r\n    'NAD',\r\n    'ZAR',\r\n    'AUD',\r\n    'NPR',\r\n    'EUR',\r\n    'XPF',\r\n    'NZD',\r\n    'NIO',\r\n    'XOF',\r\n    'NGN',\r\n    'NZD',\r\n    'AUD',\r\n    'USD',\r\n    'NOK',\r\n    'OMR',\r\n    'PKR',\r\n    'USD',\r\n    'PAB',\r\n    'USD',\r\n    'PGK',\r\n    'PYG',\r\n    'PEN',\r\n    'PHP',\r\n    'NZD',\r\n    'PLN',\r\n    'EUR',\r\n    'USD',\r\n    'QAR',\r\n    'EUR',\r\n    'RON',\r\n    'RUB',\r\n    'RWF',\r\n    'EUR',\r\n    'SHP',\r\n    'XCD',\r\n    'XCD',\r\n    'EUR',\r\n    'EUR',\r\n    'XCD',\r\n    'WST',\r\n    'EUR',\r\n    'STN',\r\n    'SAR',\r\n    'XOF',\r\n    'RSD',\r\n    'SCR',\r\n    'SLL',\r\n    'SGD',\r\n    'ANG',\r\n    'XSU',\r\n    'EUR',\r\n    'EUR',\r\n    'SBD',\r\n    'SOS',\r\n    'ZAR',\r\n    'SSP',\r\n    'EUR',\r\n    'LKR',\r\n    'SDG',\r\n    'SRD',\r\n    'NOK',\r\n    'SZL',\r\n    'SEK',\r\n    'CHF',\r\n    'CHE',\r\n    'CHW',\r\n    'SYP',\r\n    'TWD',\r\n    'TJS',\r\n    'TZS',\r\n    'THB',\r\n    'USD',\r\n    'XOF',\r\n    'NZD',\r\n    'TOP',\r\n    'TTD',\r\n    'TND',\r\n    'TRY',\r\n    'TMT',\r\n    'USD',\r\n    'AUD',\r\n    'UGX',\r\n    'UAH',\r\n    'AED',\r\n    'GBP',\r\n    'USD',\r\n    'USD',\r\n    'USN',\r\n    'UYU',\r\n    'UYI',\r\n    'UYW',\r\n    'UZS',\r\n    'VUV',\r\n    'VES',\r\n    'VND',\r\n    'USD',\r\n    'USD',\r\n    'XPF',\r\n    'MAD',\r\n    'YER',\r\n    'ZMW',\r\n    'ZWL',\r\n    'XBA',\r\n    'XBB',\r\n    'XBC',\r\n    'XBD',\r\n    'XTS',\r\n    'XXX',\r\n    'XAU',\r\n    'XPD',\r\n    'XPT',\r\n    'XAG'\r\n];","import { InjectedIntl } from 'react-intl';\nimport memoizeIntlConstructor from 'intl-format-cache';\n\n// Use a memoized formatter as creating instances of Intl formats is an expensive operation\nconst getNumberFormat = memoizeIntlConstructor(Intl.NumberFormat);\n\nexport const intlStyle = {\n  DECIMAL: 'decimal',\n  PERCENT: 'percent',\n  CURRENCY: 'currency'\n};\n\nexport const defaultFractionDigits = {\n  DECIMAL: 2,\n  PERCENT: 2\n};\n\nexport const extraFractionDigits = {\n  RATE: 2,\n  TECH_RATE: 4\n};\n\n// Find the default minimum fraction digits for a locale and currency code\nexport function getDefaultFractionDigitsForLocale(locale: string, options?: Intl.NumberFormatOptions) {\n  const numberFormat = getNumberFormat(locale, options);\n  const { minimumFractionDigits, maximumFractionDigits } = numberFormat.resolvedOptions();\n  return { minimumFractionDigits, maximumFractionDigits };\n}\n\nexport function getDecimalSeparator({ formatNumber }: InjectedIntl) {\n  const testValue = formatNumber(1.1);\n  return testValue[1];\n}\n\nexport function parseDecimal(value: unknown, decimalSeparator: string) {\n  // Return the value as-is if it's already a number\n  if (typeof value === 'number') {\n    return value;\n  }\n\n  if (typeof value === 'string') {\n    if (value.trim() === '') {\n      return undefined;\n    }\n\n    // Build regex to strip out everything except digits and decimal point\n    const regex = new RegExp(`[^0-9${decimalSeparator}]`, 'g');\n    const parsedValue = parseFloat(\n      value\n        .replace(regex, '') // strip out any cruft\n        .replace(decimalSeparator, '.') // make sure decimal point is standard\n    );\n\n    if (!Number.isNaN(parsedValue)) {\n      return parsedValue;\n    }\n  }\n\n  return undefined;\n}\n","/* eslint-disable react/style-prop-object */\nimport * as React from 'react';\nimport { injectIntl, InjectedIntlProps } from 'react-intl';\nimport { Icon, Input, InputProps } from \"semantic-ui-react\";\n\n\nimport {\n  getDecimalSeparator,\n  getDefaultFractionDigitsForLocale,\n  parseDecimal as parseNumber,\n  intlStyle,\n  defaultFractionDigits,\n  extraFractionDigits\n} from './IntlUtils';\n\nexport const replaceAll = (\n  stringToWorkOn: string,\n  stringToReplace: string,\n  stringToReplaceWith: string,\n  ignoreCase = false\n): string => {\n  const re = new RegExp(\n    stringToReplace.replace(/([/,!\\\\^${}[\\]().*+?|<>\\-&])/g, \"\\\\$&\"),\n    ignoreCase ? \"gi\" : \"g\"\n  );\n  stringToReplaceWith =\n    typeof stringToReplaceWith === \"string\"\n      ? stringToReplaceWith.replace(/\\$/g, \"$$$$\")\n      : stringToReplaceWith;\n  return stringToWorkOn.replace(re, stringToReplaceWith);\n};\n\nconst DECIMAL_REGEX = /[.,]/;\nconst NUMBER_REGEX = /^\\d*[.,]?\\d*$/;\nconst NBSP = '\\u00A0';\n\nexport type NumberEditorChildrenProps = { isInvalid: boolean; getInputProps: () => InputProps; };\nexport type NumberEditorChildren = (props: NumberEditorChildrenProps) => React.ReactNode;\nexport type NumberEditorBaseProps = NumberEditorProps & InjectedIntlProps;\n\nexport type SupportedHtmlInputProps = Pick<\n  React.HTMLProps<HTMLInputElement>,\n  'autoFocus' | 'disabled' | 'readOnly' | 'name' | 'tabIndex' | 'title'\n>;\n\ntype SupportedNumberFormatOptions = Pick<\n  Intl.NumberFormatOptions,\n  'style' | 'currency' | 'minimumFractionDigits' | 'maximumFractionDigits'\n>;\n\nexport type NumberEditorProps = SupportedHtmlInputProps & SupportedNumberFormatOptions & {\n  value?: number;\n  defaultFractionDigits?: number;\n  extraFractionDigits?: number;\n  children: NumberEditorChildren;\n  onChange: (value?: number) => void;\n};\n\ninterface NumberEditorBaseState {\n  displayValue: string;\n  isInvalid: boolean;\n  isFocused: boolean;\n}\n\ntype InternalSetStateParams = NumberEditorBaseState & { value?: number; };\n\nfunction replaceDecimalSeparator(value: string | number | undefined | null, separator: string) {\n  return value != null\n    ? value.toString().replace(DECIMAL_REGEX, separator)\n    : '';\n}\n\nclass NumberEditorBase extends React.Component<NumberEditorBaseProps, NumberEditorBaseState> {\n  readonly decimalSeparator: string;\n  readonly minimumFractionDigits: number;\n  readonly maximumFractionDigits: number;\n  readonly state: Readonly<NumberEditorBaseState>;\n\n  input = React.createRef<Input>();\n\n  constructor(props: NumberEditorBaseProps) {\n    super(props);\n    const { intl, currency, style, minimumFractionDigits, maximumFractionDigits, defaultFractionDigits, extraFractionDigits } = this.props;\n    // The default value of minimumFractionDigits for currency formatting is the number of minor unit digits provided by the ISO 4217 currency code list\n    // If the maximumFractionDigits value is less than the default minimumFractionDigits then Intl.NumberFormat throws an error.\n    let minimumFractionDigitsForStyle = minimumFractionDigits;\n    if (style === intlStyle.CURRENCY && typeof minimumFractionDigits === 'undefined' && typeof maximumFractionDigits !== 'undefined') {\n      const { minimumFractionDigits: minimumFractionDigitsForCurrency } = getDefaultFractionDigitsForLocale(intl.locale, { currency, style });\n      if (minimumFractionDigitsForCurrency > maximumFractionDigits) {\n        minimumFractionDigitsForStyle = maximumFractionDigits;\n      }\n    }\n\n    const {\n      minimumFractionDigits: minimumFractionDigitsForLocale,\n      maximumFractionDigits: maximumFractionDigitsForLocale\n    } = getDefaultFractionDigitsForLocale(intl.locale, {\n      currency,\n      style,\n      minimumFractionDigits: minimumFractionDigitsForStyle,\n      maximumFractionDigits\n    });\n\n    this.decimalSeparator = getDecimalSeparator(intl);\n    this.minimumFractionDigits = minimumFractionDigitsForLocale;\n    this.maximumFractionDigits = maximumFractionDigitsForLocale;\n    if (typeof minimumFractionDigits === 'undefined' && typeof maximumFractionDigits === 'undefined') {\n      // Only set default values if none of the fraction digits are provided\n      if (typeof defaultFractionDigits !== 'undefined') {\n        this.minimumFractionDigits = defaultFractionDigits;\n        this.maximumFractionDigits = defaultFractionDigits;\n      } else if (typeof extraFractionDigits !== 'undefined') {\n        this.minimumFractionDigits = minimumFractionDigitsForLocale + extraFractionDigits;\n        this.maximumFractionDigits = minimumFractionDigitsForLocale + extraFractionDigits;\n      }\n    }\n\n    this.state = this.getInitialState();\n  }\n\n  isCopyPaste = false;\n\n  componentDidMount() {\n    const { autoFocus } = this.props;\n    if (autoFocus) {\n      const { current } = this.input;\n      if (current != null) {\n        current.focus();\n      }\n    }\n  }\n\n  componentDidUpdate(prevProps: NumberEditorBaseProps, prevState: NumberEditorBaseState) {\n    const { isInvalid, isFocused } = this.state;\n    // Select the text if the value is invalid or the control is focused\n    if (isInvalid || (prevState.isFocused !== isFocused && isFocused)) {\n      const { current } = this.input;\n      if (current != null) {\n        (current as any).select();\n      }\n    }\n  }\n\n  formatValue(value: number) {\n    const { intl, style, currency } = this.props;\n    const { minimumFractionDigits, maximumFractionDigits } = this;\n\n    return intl.formatNumber(value, { style, currency, minimumFractionDigits, maximumFractionDigits });\n  }\n\n  testPastedValue(valueToTest: number, pastedValue: string, options: Intl.NumberFormatOptions) {\n    const allowedValue = this.props.intl.formatNumber(valueToTest, options);\n    return pastedValue === replaceAll(allowedValue, NBSP, ' ');\n  }\n\n  isPastedValueValid(pastedValue: string, parsedValue: number) {\n    // If the formatted value is same as the pasted value then it is considered valid\n    // All other values are invalid. This does not handle all the cases as it is difficult\n    // to address all the valid cases. This algorithm will be modified as needed\n    const { style, currency } = this.props;\n    const { maximumFractionDigits } = this;\n\n    for (let fractionDigits = 0; fractionDigits <= maximumFractionDigits; fractionDigits++) {\n      const decimalOptions = {\n        style: intlStyle.DECIMAL,\n        minimumFractionDigits: fractionDigits,\n        maximumFractionDigits\n      };\n\n      if (this.testPastedValue(parsedValue, pastedValue, decimalOptions)) {\n        return true;\n      }\n\n      if (this.testPastedValue(parsedValue, pastedValue, { ...decimalOptions, useGrouping: false })) {\n        return true;\n      }\n\n      if (style === intlStyle.CURRENCY) {\n        const currencyOptions = {\n          currency,\n          style,\n          minimumFractionDigits: fractionDigits,\n          maximumFractionDigits\n        };\n\n        if (this.testPastedValue(parsedValue, pastedValue, currencyOptions)) {\n          return true;\n        }\n\n        if (this.testPastedValue(parsedValue, pastedValue, { ...currencyOptions, useGrouping: false })) {\n          return true;\n        }\n      }\n\n      if (style === intlStyle.PERCENT) {\n        const percentOptions = {\n          style,\n          minimumFractionDigits: fractionDigits,\n          maximumFractionDigits\n        };\n\n        if (this.testPastedValue(parsedValue / 100, pastedValue, percentOptions)) {\n          return true;\n        }\n\n        if (this.testPastedValue(parsedValue / 100, pastedValue, { ...percentOptions, useGrouping: false })) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  }\n\n  isInteger() {\n    const { minimumFractionDigits, maximumFractionDigits } = this;\n    return minimumFractionDigits === 0 && maximumFractionDigits === 0;\n  }\n\n  getValue() {\n    const { value, style } = this.props;\n    if (value != null && style === intlStyle.PERCENT) {\n      return value * 100;\n    }\n    return value;\n  }\n\n  getDisplayValue() {\n    const value = this.getValue();\n    const { minimumFractionDigits, maximumFractionDigits } = this;\n\n    return value != null\n      ? this.props.intl.formatNumber(value, {\n        style: intlStyle.DECIMAL,\n        minimumFractionDigits,\n        maximumFractionDigits,\n        useGrouping: false\n      })\n      : '';\n  }\n\n  getInitialState() {\n    return {\n      displayValue: this.getDisplayValue(),\n      isInvalid: false,\n      isFocused: false\n    };\n  }\n\n  internalSetState = <K extends keyof InternalSetStateParams>(stateToSet: Pick<InternalSetStateParams, K>) => {\n    const { style } = this.props;\n    const isValueChanged = stateToSet.hasOwnProperty('value');\n    const { value, ...state } = stateToSet as { value?: number; };\n    this.setState(state, () => {\n      let valueToSave = value;\n      if (valueToSave != null && style === intlStyle.PERCENT) {\n        valueToSave /= 100;\n      }\n      if (isValueChanged && this.props.value !== valueToSave) {\n        this.props.onChange(valueToSave);\n      }\n    });\n  };\n\n  handleCopyPaste = (pastedValue: string) => {\n    this.isCopyPaste = false;\n    const parsedValue = parseNumber(pastedValue, this.decimalSeparator);\n    const isInvalid = parsedValue == null || !this.isPastedValueValid(pastedValue, parsedValue);\n\n    if (isInvalid) {\n      // Show the invalid displayValue, we do not change the underlying value\n      // displayValue will be reverted to the last valid value on the next action (blur, click)\n      this.internalSetState({\n        displayValue: pastedValue,\n        isInvalid: true\n      });\n      return;\n    }\n\n    // Value is valid, show the value without any formating elements (percentage, currency symbols etc.)\n    this.internalSetState({\n      value: parsedValue,\n      displayValue: replaceDecimalSeparator(parsedValue, this.decimalSeparator),\n      isInvalid: false\n    });\n  };\n\n  handleChange = ({ target }: React.ChangeEvent<HTMLInputElement>) => {\n    const { value } = target;\n\n    if (value === '') {\n      this.internalSetState({\n        value: undefined,\n        displayValue: '',\n        isInvalid: false\n      });\n      return;\n    }\n\n    if (this.isCopyPaste) {\n      this.handleCopyPaste(value);\n      return;\n    }\n\n    // Check if value is a valid number\n    if (NUMBER_REGEX.test(value)) {\n      // Check if value has a decimal separator\n      if (DECIMAL_REGEX.test(value)) {\n        if (this.isInteger()) {\n          return;\n        }\n\n        // Replace the decimal separator as per the current locale\n        const displayValue = replaceDecimalSeparator(value, this.decimalSeparator);\n        // Add \"0\" in front if the decimal separator is entered in empty field\n        if (displayValue.length === 1) {\n          this.internalSetState({\n            value: 0,\n            displayValue: `0${displayValue}`,\n            isInvalid: false\n          });\n          return;\n        }\n\n        // Check the precision setting and set the maximum fraction digits.\n        const { maximumFractionDigits } = this;\n        const [displayValueIntegerPart, displayValueDecimalPart] = displayValue.split(this.decimalSeparator);\n\n        if (displayValueDecimalPart.length > maximumFractionDigits) {\n          const roundedDisplayValue = `${displayValueIntegerPart}${this.decimalSeparator}${displayValueDecimalPart.slice(0, maximumFractionDigits)}`;\n          this.internalSetState({\n            value: parseFloat(replaceDecimalSeparator(roundedDisplayValue, '.')),\n            displayValue: roundedDisplayValue,\n            isInvalid: false\n          });\n          return;\n        }\n\n        this.internalSetState({\n          value: parseFloat(replaceDecimalSeparator(value, '.')),\n          displayValue,\n          isInvalid: false\n        });\n        return;\n      }\n\n      // Value has no decimal separator. Convert value to number and convert\n      // it back to string. This removes the leading 0 i.e 01 -> 1\n      const parsedValue = parseFloat(value);\n      this.internalSetState({\n        value: parsedValue,\n        displayValue: parsedValue.toString(),\n        isInvalid: false\n      });\n      return;\n    }\n\n    // Value is not a valid number so it is rejected\n    if (this.state.isInvalid) {\n      // Clear the value if the control is in invalid state\n      this.internalSetState({\n        value: undefined,\n        displayValue: '',\n        isInvalid: false\n      });\n    }\n  };\n\n  handleFocus = () => {\n    this.setState({ isFocused: true });\n  };\n\n  handleBlur = () => {\n    this.internalSetState({\n      isFocused: false,\n      isInvalid: false,\n      displayValue: this.getDisplayValue()\n    });\n  };\n\n  handleClick = () => {\n    if (this.state.isInvalid) {\n      this.internalSetState({\n        displayValue: this.getDisplayValue(),\n        isInvalid: false\n      });\n    }\n  };\n\n  handleKeyDown = (e: React.KeyboardEvent<HTMLInputElement>) => {\n    if ((e.ctrlKey || e.metaKey) && !e.altKey && e.keyCode === 86) {\n      this.isCopyPaste = true;\n    }\n  };\n\n  handlePaste = () => {\n    this.isCopyPaste = true;\n  };\n\n  getInputProps = () => {\n    const { value, name, title, tabIndex, disabled, readOnly } = this.props;\n    const { displayValue, isFocused } = this.state;\n    const inputValue = !isFocused && value != null ? this.formatValue(value) : displayValue;\n\n    return {\n      name,\n      title,\n      tabIndex,\n      disabled,\n      readOnly,\n      ref: this.input,\n      value: inputValue,\n      onChange: this.handleChange,\n      onFocus: this.handleFocus,\n      onBlur: this.handleBlur,\n      onKeyDown: this.handleKeyDown,\n      onClick: this.handleClick,\n      onPaste: this.handlePaste\n    };\n  };\n\n  getRenderProps() {\n    const { isInvalid } = this.state;\n\n    return {\n      isInvalid,\n      getInputProps: this.getInputProps\n    };\n  }\n\n  render() {\n    return this.props.children(this.getRenderProps());\n  }\n}\n\nexport const NumberEditor = injectIntl(NumberEditorBase);\n\nconst errorMessage =\n  \"Invalid format. Only numbers and single decimal separator are allowed.\";\nconst errorIcon = <Icon name=\"exclamation circle\" link />;\n\ninterface GridNumberEditorProps {\n  defaultValue?: number;\n  autoFocus?: boolean;\n  children?: NumberEditorChildren;\n}\n\ninterface GridNumberEditorState {\n  value?: number;\n}\n\ntype NumberEditorFactoryProps = Pick<NumberEditorProps, 'style' | 'defaultFractionDigits' | 'extraFractionDigits'>;\n\nfunction DefaultGridNumberInput({ getInputProps, isInvalid }: NumberEditorChildrenProps) {\n  return (\n    <Input\n      {...getInputProps()}\n      className={isInvalid ? 'invalidGridInput' : undefined}\n      icon={isInvalid && errorIcon}\n      iconPosition=\"left\" />\n  );\n}\n\nfunction gridNumberEditorFactory<P extends GridNumberEditorProps>(intlProps: NumberEditorFactoryProps): React.ComponentClass<P, GridNumberEditorState> {\n  return class GridNumberEditor extends React.Component<P, GridNumberEditorState> {\n    readonly state: Readonly<GridNumberEditorState> = { value: this.props.defaultValue };\n\n    handleChange = (value?: number) => {\n      this.setState({ value });\n    };\n\n    getValue() {\n      return this.state.value;\n    }\n\n    render() {\n      const { defaultValue, autoFocus, children, ...rest } = this.props;\n      return (\n        <NumberEditor\n          {...intlProps}\n          {...rest}\n          value={this.state.value}\n          onChange={this.handleChange}>\n          {p =>\n            children\n              ? (children as NumberEditorChildren)(p)\n              : <DefaultGridNumberInput {...p} />\n          }\n        </NumberEditor>\n      );\n    }\n  };\n}\n\nexport type GridIntegerEditorProps = GridNumberEditorProps;\nexport const GridIntegerEditor = gridNumberEditorFactory<GridIntegerEditorProps>({\n  style: intlStyle.DECIMAL,\n  defaultFractionDigits: 0\n});\n\nexport type GridUnitsEditorProps = GridIntegerEditorProps;\nexport { GridIntegerEditor as GridUnitsEditor };\n\nexport type GridDecimalEditorProps = GridNumberEditorProps & Pick<NumberEditorBaseProps, 'minimumFractionDigits' | 'maximumFractionDigits'>;\nexport const GridDecimalEditor = gridNumberEditorFactory<GridDecimalEditorProps>({\n  style: intlStyle.DECIMAL,\n  defaultFractionDigits: defaultFractionDigits.DECIMAL\n});\n\nexport type GridPercentEditorProps = GridNumberEditorProps & Pick<NumberEditorBaseProps, 'minimumFractionDigits' | 'maximumFractionDigits'>;\nexport const GridPercentEditor = gridNumberEditorFactory<GridPercentEditorProps>({\n  style: intlStyle.PERCENT,\n  defaultFractionDigits: defaultFractionDigits.PERCENT\n});\n\nexport type GridCurrencyEditorProps = GridNumberEditorProps & Pick<NumberEditorBaseProps, 'minimumFractionDigits' | 'maximumFractionDigits' | 'currency'>;\nexport const GridCurrencyEditor = gridNumberEditorFactory<GridCurrencyEditorProps>({\n  style: intlStyle.CURRENCY\n});\n\nexport type GridRateEditorProps = GridNumberEditorProps & Pick<NumberEditorBaseProps, 'currency'>;\nexport const GridRateEditor = gridNumberEditorFactory<GridRateEditorProps>({\n  style: intlStyle.CURRENCY,\n  extraFractionDigits: extraFractionDigits.RATE\n});\n\nexport type GridTechRateEditorProps = GridNumberEditorProps & Pick<NumberEditorBaseProps, 'currency'>;\nexport const GridTechRateEditor = gridNumberEditorFactory<GridTechRateEditorProps>({\n  style: intlStyle.CURRENCY,\n  extraFractionDigits: extraFractionDigits.TECH_RATE\n});\n\ntype FormNumberEditorProps = Pick<NumberEditorProps, 'value' | 'onChange'> & {\n  children?: NumberEditorChildren;\n};\n\nfunction DefaultFormNumberInput({ getInputProps, isInvalid }: NumberEditorChildrenProps) {\n  return (\n    <div style={{ display: 'inline-block' }}>\n      <Input\n        {...getInputProps()}\n        error={isInvalid} />\n      {isInvalid && <div>{errorMessage}</div>}\n    </div>\n  );\n}\n\nfunction formNumberEditorFactory<P extends FormNumberEditorProps>(intlProps: NumberEditorFactoryProps): React.FunctionComponent<P> {\n  return function FormNumberEditor({ value, onChange, children }: P) {\n    return (\n      <NumberEditor\n        {...intlProps}\n        value={value}\n        onChange={onChange}>\n        {children || DefaultFormNumberInput}\n      </NumberEditor>\n    );\n  };\n}\n\nexport type FormDecimalEditorProps = FormNumberEditorProps & Pick<NumberEditorBaseProps, 'minimumFractionDigits' | 'maximumFractionDigits'>;\nexport const FormDecimalEditor = formNumberEditorFactory<FormDecimalEditorProps>({\n  style: intlStyle.DECIMAL,\n  defaultFractionDigits: defaultFractionDigits.DECIMAL\n});\n\nexport type FormPercentEditorProps = FormNumberEditorProps & Pick<NumberEditorBaseProps, 'minimumFractionDigits' | 'maximumFractionDigits'>;\nexport const FormPercentEditor = formNumberEditorFactory<FormPercentEditorProps>({\n  style: intlStyle.PERCENT,\n  defaultFractionDigits: defaultFractionDigits.PERCENT\n});\n\nexport type FormCurrencyEditorProps = FormNumberEditorProps & Pick<NumberEditorBaseProps, 'minimumFractionDigits' | 'maximumFractionDigits'> & { currency: string; };\nexport const FormCurrencyEditor = formNumberEditorFactory<FormCurrencyEditorProps>({\n  style: intlStyle.CURRENCY\n});\n\nexport type FormRateEditorProps = FormNumberEditorProps & { currency: string };\nexport const FormRateEditor = formNumberEditorFactory<FormRateEditorProps>({\n  style: intlStyle.CURRENCY,\n  extraFractionDigits: extraFractionDigits.RATE\n});\n\nexport type FormTechRateEditorProps = FormNumberEditorProps & { currency: string };\nexport const FormTechRateEditor = formNumberEditorFactory<FormTechRateEditorProps>({\n  style: intlStyle.CURRENCY,\n  extraFractionDigits: extraFractionDigits.TECH_RATE\n});\n","/* eslint-disable react/style-prop-object */\nimport * as React from 'react';\nimport { FormattedNumber, injectIntl, InjectedIntlProps } from 'react-intl';\n\nimport {\n  getDefaultFractionDigitsForLocale,\n  intlStyle,\n  defaultFractionDigits,\n  extraFractionDigits\n} from './IntlUtils';\n\ntype SupportedFormattedNumberProps = Pick<\n  FormattedNumber.Props,\n  // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NumberFormat#Parameters\n  'style' | 'currency' | 'minimumFractionDigits' | 'maximumFractionDigits' | 'children'\n>;\n\ntype NumberFormatterProps = SupportedFormattedNumberProps & {\n  value: number | undefined | null;\n  defaultFractionDigits?: number;\n};\n\nfunction NumberFormatter({ value, minimumFractionDigits, maximumFractionDigits, defaultFractionDigits, ...props }: NumberFormatterProps) {\n  if (value == null) {\n    return null;\n  }\n\n  if (typeof minimumFractionDigits === 'undefined' && typeof maximumFractionDigits === 'undefined' && typeof defaultFractionDigits !== 'undefined') {\n    minimumFractionDigits = defaultFractionDigits;\n    maximumFractionDigits = defaultFractionDigits;\n  }\n\n  return (\n    <FormattedNumber\n      {...props}\n      value={value}\n      minimumFractionDigits={minimumFractionDigits}\n      maximumFractionDigits={maximumFractionDigits} />\n  );\n}\n\nexport type DecimalFormatterProps = Pick<NumberFormatterProps, 'value' | 'minimumFractionDigits' | 'maximumFractionDigits' | 'children'>;\nexport function DecimalFormatter(props: DecimalFormatterProps) {\n  return (\n    <NumberFormatter\n      {...props}\n      style={intlStyle.DECIMAL}\n      defaultFractionDigits={defaultFractionDigits.DECIMAL} />\n  );\n}\n\nexport type IntegerFormatterProps = Pick<NumberFormatterProps, 'value' | 'children'>;\nexport function IntegerFormatter(props: IntegerFormatterProps) {\n  return (\n    <DecimalFormatter\n      {...props}\n      minimumFractionDigits={0}\n      maximumFractionDigits={0} />\n  );\n}\n\nexport type UnitsFormatterProps = IntegerFormatterProps;\nexport { IntegerFormatter as UnitsFormatter };\n\nexport type PercentFormatterProps = DecimalFormatterProps;\nexport function PercentFormatter(props: PercentFormatterProps) {\n  return (\n    <NumberFormatter\n      {...props}\n      style={intlStyle.PERCENT}\n      defaultFractionDigits={defaultFractionDigits.PERCENT} />\n  );\n}\n\nexport type CurrencyFormatterProps = Pick<NumberFormatterProps, 'value' | 'currency' | 'minimumFractionDigits' | 'maximumFractionDigits' | 'children'>;\nexport function CurrencyFormatter(props: CurrencyFormatterProps) {\n  return <NumberFormatter {...props} style={intlStyle.CURRENCY} />;\n}\n\ntype DefaultCurrencyFormatterBaseProps = DefaultCurrencyFormatterProps & InjectedIntlProps & { extraFractionDigits: number };\nfunction DefaultCurrencyFormatterBase({ intl, extraFractionDigits, ...props }: DefaultCurrencyFormatterBaseProps) {\n  // Add extra fraction digits to the default minimum fraction digits for the current locale and currency\n  const defaultFractionDigits = getDefaultFractionDigitsForLocale(\n    intl.locale, {\n      style: intlStyle.CURRENCY,\n      currency: props.currency\n    }\n  ).minimumFractionDigits + extraFractionDigits;\n\n  return (\n    <CurrencyFormatter\n      {...props}\n      minimumFractionDigits={defaultFractionDigits}\n      maximumFractionDigits={defaultFractionDigits} />\n  );\n}\n\ntype DefaultCurrencyFormatterProps = Pick<CurrencyFormatterProps, 'value' | 'currency' | 'children'>;\nconst DefaultCurrencyFormatter = injectIntl(DefaultCurrencyFormatterBase);\n\nexport type RateFormatterProps = DefaultCurrencyFormatterProps;\nexport function RateFormatter(props: RateFormatterProps) {\n  return (\n    <DefaultCurrencyFormatter\n      {...props}\n      extraFractionDigits={extraFractionDigits.RATE} />\n  );\n}\n\nexport type TechRateFormatterProps = DefaultCurrencyFormatterProps;\nexport function TechRateFormatter(props: TechRateFormatterProps) {\n  return (\n    <DefaultCurrencyFormatter\n      {...props}\n      extraFractionDigits={extraFractionDigits.TECH_RATE} />\n  );\n}\n","import './index.css';\nimport * as React from \"react\";\nimport { render } from \"react-dom\";\nimport { IntlProvider, addLocaleData } from \"react-intl\";\n\nimport { currencyCode } from './currenyCode';\n\nimport {\n  GridIntegerEditor,\n  GridDecimalEditor,\n  GridCurrencyEditor,\n  GridPercentEditor,\n  GridRateEditor\n} from \"./IntlEditors\";\n\nimport {\n  DecimalFormatter,\n  CurrencyFormatter,\n  PercentFormatter,\n  RateFormatter,\n  TechRateFormatter\n} from \"./IntlFormatters\";\n\nconst en = require(\"react-intl/locale-data/en\");\nconst fr = require(\"react-intl/locale-data/fr\");\nconst is = require(\"react-intl/locale-data/is\");\n\naddLocaleData([...en, ...fr, ...is]);\n\nclass Editors extends React.Component {\n  state = {\n    locale: \"en-US\",\n    minimumFractionDigits: 3,\n    maximumFractionDigits: 4,\n    currencyCode: \"USD\"\n  };\n  handleChange = e => {\n    this.setState({ [e.target.name]: e.target.value });\n  };\n\n  public render() {\n    const key = `${this.state.locale}-${this.state.currencyCode}-${this.state.minimumFractionDigits}-${this.state.maximumFractionDigits}`;\n    return (\n      <IntlProvider locale={this.state.locale} key={key}>\n        <div>\n          <fieldset>\n            <legend>Editors</legend>\n            <div style={{ margin: 20 }}>\n              <div style={{ marginTop: 20 }}>\n                <label>\n                  Locale:\n                  <select\n                    name=\"locale\"\n                    value={this.state.locale}\n                    onChange={this.handleChange}\n                  >\n                    <option value=\"fr-FR\">fr-FR</option>\n                    <option value=\"en-US\">en-US</option>\n                    <option value=\"en-GB\">en-GB</option>\n                    <option value=\"is-IS\">is-IS</option>\n                  </select>\n                </label>\n              </div>\n              <div style={{ marginTop: 20 }}>\n                <label>\n                  minimumFractionDigits:\n                  <input\n                    type=\"number\"\n                    name=\"minimumFractionDigits\"\n                    value={this.state.minimumFractionDigits}\n                    onChange={this.handleChange}\n                  />\n                </label>\n              </div>\n              <div style={{ marginTop: 20 }}>\n                <label>\n                  maximumFractionDigits:\n                  <input\n                    type=\"number\"\n                    name=\"maximumFractionDigits\"\n                    value={this.state.maximumFractionDigits}\n                    onChange={this.handleChange}\n                  />\n                </label>\n              </div>\n              <div style={{ marginTop: 20 }}>\n                <label>\n                  currency code:\n                  <select\n                    name=\"currencyCode\"\n                    value={this.state.currencyCode}\n                    onChange={this.handleChange}\n                  >\n                    {currencyCode.sort().map(c => <option value={c}>{c}</option>)}\n                  </select>\n                </label>\n              </div>\n              <div style={{ marginTop: 20 }}>\n                <label>\n                  Grid Integer Editor:\n                  <GridIntegerEditor\n                    defaultValue={2}\n                  />\n                </label>\n              </div>\n              <div style={{ marginTop: 20 }}>\n                <label>\n                  Grid Decimal Editor:\n                  <GridDecimalEditor\n                    defaultValue={2}\n                    minimumFractionDigits={this.state.minimumFractionDigits || undefined}\n                    maximumFractionDigits={this.state.maximumFractionDigits || undefined}\n                  />\n                </label>\n              </div>\n              <div style={{ marginTop: 20 }}>\n                <label>\n                  Grid Currency Editor:\n                  <GridCurrencyEditor\n                    defaultValue={2}\n                    currency={this.state.currencyCode}\n                    minimumFractionDigits={this.state.minimumFractionDigits || undefined}\n                    maximumFractionDigits={this.state.maximumFractionDigits || undefined}\n                  />\n                </label>\n              </div>\n              <div style={{ marginTop: 20 }}>\n                <label>\n                  Grid Percent Editor:\n                  <GridPercentEditor\n                    defaultValue={0.2}\n                    minimumFractionDigits={this.state.minimumFractionDigits || undefined}\n                    maximumFractionDigits={this.state.maximumFractionDigits || undefined}\n                  />\n                </label>\n              </div>\n              <div style={{ marginTop: 20 }}>\n                <label>\n                  Grid Rate Editor:\n                  <GridRateEditor\n                    defaultValue={20}\n                    currency={this.state.currencyCode}\n                  />\n                </label>\n              </div>\n            </div>\n          </fieldset>\n        </div>\n      </IntlProvider>\n    );\n  }\n}\n\nclass Formatters extends React.Component {\n  state = {\n    locale: \"en-US\",\n    minimumFractionDigits: 3,\n    maximumFractionDigits: 4,\n    currencyCode: \"USD\",\n    currencyFormatterValue: 2,\n    decimalFormatterValue: 1.2,\n    percentFormatterValue: 0.2,\n    rateFormatterValue: 3.4,\n    techRateFormatterValue: 1.2\n  };\n  handleChange = e => {\n    this.setState({ [e.target.name]: e.target.value });\n  };\n\n  public render() {\n    const key = `${this.state.locale}-${this.state.currencyCode}-${this.state.minimumFractionDigits}-${this.state.maximumFractionDigits}`;\n    return (\n      <IntlProvider locale={this.state.locale} key={key}>\n        <div>\n          <fieldset>\n            <legend>Formatters</legend>\n            <div style={{ margin: 20 }}>\n              <div style={{ marginTop: 20 }}>\n                <label>\n                  Locale:\n                  <select\n                    name=\"locale\"\n                    value={this.state.locale}\n                    onChange={this.handleChange}\n                  >\n                    <option value=\"fr-FR\">fr-FR</option>\n                    <option value=\"en-US\">en-US</option>\n                    <option value=\"en-GB\">en-GB</option>\n                    <option value=\"is-IS\">is-IS</option>\n                  </select>\n                </label>\n              </div>\n              <div style={{ marginTop: 20 }}>\n                <label>\n                  minimumFractionDigits:\n                  <input\n                    type=\"number\"\n                    name=\"minimumFractionDigits\"\n                    value={this.state.minimumFractionDigits}\n                    onChange={this.handleChange}\n                  />\n                </label>\n              </div>\n              <div style={{ marginTop: 20 }}>\n                <label>\n                  maximumFractionDigits:\n                  <input\n                    type=\"number\"\n                    name=\"maximumFractionDigits\"\n                    value={this.state.maximumFractionDigits}\n                    onChange={this.handleChange}\n                  />\n                </label>\n              </div>\n              <div style={{ marginTop: 20 }}>\n                <label>\n                  currency code:\n                  <select\n                    name=\"currencyCode\"\n                    value={this.state.currencyCode}\n                    onChange={this.handleChange}\n                  >\n                    {currencyCode.sort().map(c => <option value={c}>{c}</option>)}\n                  </select>\n                </label>\n              </div>\n\n              <div style={{ marginTop: 20 }}>\n                <label>\n                  Decimal Formatter:\n                  <input\n                    type=\"number\"\n                    name=\"decimalFormatterValue\"\n                    value={this.state.decimalFormatterValue}\n                    onChange={this.handleChange}\n                  />\n                  <DecimalFormatter\n                    value={this.state.decimalFormatterValue}\n                    minimumFractionDigits={this.state.minimumFractionDigits || undefined}\n                    maximumFractionDigits={this.state.maximumFractionDigits || undefined}\n                  />\n                </label>\n              </div>\n\n              <div style={{ marginTop: 20 }}>\n                <label>\n                  CurrencyFormatter:\n                  <input\n                    type=\"number\"\n                    name=\"currencyFormatterValue\"\n                    value={this.state.currencyFormatterValue}\n                    onChange={this.handleChange}\n                  />\n                  <CurrencyFormatter\n                    value={this.state.currencyFormatterValue}\n                    currency={this.state.currencyCode}\n                    minimumFractionDigits={this.state.minimumFractionDigits || undefined}\n                    maximumFractionDigits={this.state.maximumFractionDigits || undefined}\n                  />\n                </label>\n              </div>\n\n              <div style={{ marginTop: 20 }}>\n                <label>\n                  PercentFormatter:\n                  <input\n                    type=\"number\"\n                    name=\"percentFormatterValue\"\n                    value={this.state.percentFormatterValue}\n                    onChange={this.handleChange}\n                  />\n                  <PercentFormatter\n                    value={this.state.percentFormatterValue}\n                    minimumFractionDigits={this.state.minimumFractionDigits || undefined}\n                    maximumFractionDigits={this.state.maximumFractionDigits || undefined}\n                  />\n                </label>\n              </div>\n\n              <div style={{ marginTop: 20 }}>\n                <label>\n                  Rate Formatter:\n                  <input\n                    type=\"number\"\n                    name=\"rateFormatterValue\"\n                    value={this.state.rateFormatterValue}\n                    onChange={this.handleChange}\n                  />\n                  <RateFormatter\n                    value={this.state.rateFormatterValue}\n                    currency={this.state.currencyCode}\n                  />\n                </label>\n              </div>\n\n              <div style={{ marginTop: 20 }}>\n                <label>\n                  Tech Rate Formatter:\n                  <input\n                    type=\"number\"\n                    name=\"techRateFormatterValue\"\n                    value={this.state.techRateFormatterValue}\n                    onChange={this.handleChange}\n                  />\n                  <TechRateFormatter\n                    value={this.state.techRateFormatterValue}\n                    currency={this.state.currencyCode}\n                  />\n                </label>\n              </div>\n            </div>\n          </fieldset>\n        </div>\n      </IntlProvider>\n    );\n  }\n}\n\nclass App extends React.Component {\n  componentDidCatch() {\n    console.log('An error occurred');\n  }\n\n  render() {\n    return (\n      <div>\n        <Editors />\n        <Formatters />\n      </div>\n    );\n  }\n}\n\nrender(\n  <App />,\n  document.getElementById(\"root\")\n);"],"sourceRoot":""}