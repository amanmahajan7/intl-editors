{"version":3,"sources":["currenyCode.ts","IntlUtils.tsx","IntlEditors.tsx","IntlFormatters.tsx","index.tsx"],"names":["currencyCode","getNumberFormat","memoizeIntlConstructor","Intl","NumberFormat","intlStyle","DECIMAL","PERCENT","CURRENCY","defaultFractionDigits","extraFractionDigits","RATE","TECH_RATE","getDefaultFractionDigitsForLocale","locale","options","_numberFormat$resolve","resolvedOptions","minimumFractionDigits","maximumFractionDigits","DECIMAL_REGEX","NUMBER_REGEX","replaceDecimalSeparator","value","separator","toString","replace","NumberEditorBase","props","context","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","decimalSeparator","defaultMinimumFractionDigits","defaultMaximumFractionDigits","state","input","React","isCopyPaste","setValue","stateToSet","style","isValueChanged","hasOwnProperty","objectWithoutProperties","setState","valueToSave","onChange","handleCopyPaste","pastedValue","parsedValue","trim","regex","RegExp","concat","parseFloat","Number","isNaN","parseDecimal","isPastedValueValid","isInvalid","displayValue","handleChange","_ref","target","test","length","_this$props$maximumFr","_displayValue$split","split","_displayValue$split2","slicedToArray","displayValueIntegerPart","displayValueDecimalPart","roundedDisplayValue","slice","undefined","handleFocus","isFocused","handleBlur","getDisplayValue","handleClick","handleKeyDown","e","ctrlKey","metaKey","altKey","keyCode","handlePaste","getInputProps","_this$state","formattedValue","formatValue","ref","onFocus","onBlur","onKeyDown","onClick","onPaste","_this$props","intl","currency","_getDefaultFractionDi","minimumFractionDigitsForLocale","maximumFractionDigitsForLocale","formatNumber","getInitialState","autoFocus","current","focus","prevProps","prevState","_this$state2","select","_this$props2","_this$props2$minimumF","_this$props2$maximumF","valueToTest","stringToWorkOn","stringToReplace","stringToReplaceWith","ignoreCase","arguments","re","replaceAll","_this$props3","_this$props3$maximumF","fractionDigits","testPastedValue","_this$props4","getValue","_this$props5","_this$props5$minimumF","_this$props5$maximumF","useGrouping","children","getRenderProps","NumberEditor","injectIntl","errorMessage","errorIcon","react","Icon","name","link","DefaultGridNumberInput","_ref2","Input","assign","className","icon","iconPosition","gridNumberEditorFactory","intlProps","_React$Component2","GridNumberEditor","_getPrototypeOf2","_this2","_len","args","Array","_key","apply","defaultValue","inherits","createClass","key","_this$props6","rest","p","GridDecimalEditor","GridPercentEditor","GridCurrencyEditor","GridRateEditor","DefaultFormNumberInput","_ref3","display","error","formNumberEditorFactory","_ref4","NumberFormatter","extraProps","index_es","DecimalFormatter","PercentFormatter","CurrencyFormatter","DefaultCurrencyFormatter","RateFormatter","TechRateFormatter","en","require","fr","is","addLocaleData","toConsumableArray","Editors","console","log","defineProperty","margin","marginTop","type","sort","map","c","Formatters","currencyFormatterValue","decimalFormatterValue","percentFormatterValue","rateFormatterValue","techRateFormatterValue","App","src_Editors","src_Formatters","render","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.316c6630.chunk.js","sourcesContent":["export const currencyCode = [\r\n    'AFN',\r\n    'EUR',\r\n    'ALL',\r\n    'DZD',\r\n    'USD',\r\n    'EUR',\r\n    'AOA',\r\n    'XCD',\r\n    'XCD',\r\n    'ARS',\r\n    'AMD',\r\n    'AWG',\r\n    'AUD',\r\n    'EUR',\r\n    'AZN',\r\n    'BSD',\r\n    'BHD',\r\n    'BDT',\r\n    'BBD',\r\n    'BYN',\r\n    'EUR',\r\n    'BZD',\r\n    'XOF',\r\n    'BMD',\r\n    'INR',\r\n    'BTN',\r\n    'BOB',\r\n    'BOV',\r\n    'USD',\r\n    'BAM',\r\n    'BWP',\r\n    'NOK',\r\n    'BRL',\r\n    'USD',\r\n    'BND',\r\n    'BGN',\r\n    'XOF',\r\n    'BIF',\r\n    'CVE',\r\n    'KHR',\r\n    'XAF',\r\n    'CAD',\r\n    'KYD',\r\n    'XAF',\r\n    'XAF',\r\n    'CLP',\r\n    'CLF',\r\n    'CNY',\r\n    'AUD',\r\n    'AUD',\r\n    'COP',\r\n    'COU',\r\n    'KMF',\r\n    'CDF',\r\n    'XAF',\r\n    'NZD',\r\n    'CRC',\r\n    'XOF',\r\n    'HRK',\r\n    'CUP',\r\n    'CUC',\r\n    'ANG',\r\n    'EUR',\r\n    'CZK',\r\n    'DKK',\r\n    'DJF',\r\n    'XCD',\r\n    'DOP',\r\n    'USD',\r\n    'EGP',\r\n    'SVC',\r\n    'USD',\r\n    'XAF',\r\n    'ERN',\r\n    'EUR',\r\n    'ETB',\r\n    'EUR',\r\n    'FKP',\r\n    'DKK',\r\n    'FJD',\r\n    'EUR',\r\n    'EUR',\r\n    'EUR',\r\n    'XPF',\r\n    'EUR',\r\n    'XAF',\r\n    'GMD',\r\n    'GEL',\r\n    'EUR',\r\n    'GHS',\r\n    'GIP',\r\n    'EUR',\r\n    'DKK',\r\n    'XCD',\r\n    'EUR',\r\n    'USD',\r\n    'GTQ',\r\n    'GBP',\r\n    'GNF',\r\n    'XOF',\r\n    'GYD',\r\n    'HTG',\r\n    'USD',\r\n    'AUD',\r\n    'EUR',\r\n    'HNL',\r\n    'HKD',\r\n    'HUF',\r\n    'ISK',\r\n    'INR',\r\n    'IDR',\r\n    'XDR',\r\n    'IRR',\r\n    'IQD',\r\n    'EUR',\r\n    'GBP',\r\n    'ILS',\r\n    'EUR',\r\n    'JMD',\r\n    'JPY',\r\n    'GBP',\r\n    'JOD',\r\n    'KZT',\r\n    'KES',\r\n    'AUD',\r\n    'KPW',\r\n    'KRW',\r\n    'KWD',\r\n    'KGS',\r\n    'LAK',\r\n    'EUR',\r\n    'LBP',\r\n    'LSL',\r\n    'ZAR',\r\n    'LRD',\r\n    'LYD',\r\n    'CHF',\r\n    'EUR',\r\n    'EUR',\r\n    'MOP',\r\n    'MKD',\r\n    'MGA',\r\n    'MWK',\r\n    'MYR',\r\n    'MVR',\r\n    'XOF',\r\n    'EUR',\r\n    'USD',\r\n    'EUR',\r\n    'MRU',\r\n    'MUR',\r\n    'EUR',\r\n    'XUA',\r\n    'MXN',\r\n    'MXV',\r\n    'USD',\r\n    'MDL',\r\n    'EUR',\r\n    'MNT',\r\n    'EUR',\r\n    'XCD',\r\n    'MAD',\r\n    'MZN',\r\n    'MMK',\r\n    'NAD',\r\n    'ZAR',\r\n    'AUD',\r\n    'NPR',\r\n    'EUR',\r\n    'XPF',\r\n    'NZD',\r\n    'NIO',\r\n    'XOF',\r\n    'NGN',\r\n    'NZD',\r\n    'AUD',\r\n    'USD',\r\n    'NOK',\r\n    'OMR',\r\n    'PKR',\r\n    'USD',\r\n    'PAB',\r\n    'USD',\r\n    'PGK',\r\n    'PYG',\r\n    'PEN',\r\n    'PHP',\r\n    'NZD',\r\n    'PLN',\r\n    'EUR',\r\n    'USD',\r\n    'QAR',\r\n    'EUR',\r\n    'RON',\r\n    'RUB',\r\n    'RWF',\r\n    'EUR',\r\n    'SHP',\r\n    'XCD',\r\n    'XCD',\r\n    'EUR',\r\n    'EUR',\r\n    'XCD',\r\n    'WST',\r\n    'EUR',\r\n    'STN',\r\n    'SAR',\r\n    'XOF',\r\n    'RSD',\r\n    'SCR',\r\n    'SLL',\r\n    'SGD',\r\n    'ANG',\r\n    'XSU',\r\n    'EUR',\r\n    'EUR',\r\n    'SBD',\r\n    'SOS',\r\n    'ZAR',\r\n    'SSP',\r\n    'EUR',\r\n    'LKR',\r\n    'SDG',\r\n    'SRD',\r\n    'NOK',\r\n    'SZL',\r\n    'SEK',\r\n    'CHF',\r\n    'CHE',\r\n    'CHW',\r\n    'SYP',\r\n    'TWD',\r\n    'TJS',\r\n    'TZS',\r\n    'THB',\r\n    'USD',\r\n    'XOF',\r\n    'NZD',\r\n    'TOP',\r\n    'TTD',\r\n    'TND',\r\n    'TRY',\r\n    'TMT',\r\n    'USD',\r\n    'AUD',\r\n    'UGX',\r\n    'UAH',\r\n    'AED',\r\n    'GBP',\r\n    'USD',\r\n    'USD',\r\n    'USN',\r\n    'UYU',\r\n    'UYI',\r\n    'UYW',\r\n    'UZS',\r\n    'VUV',\r\n    'VES',\r\n    'VND',\r\n    'USD',\r\n    'USD',\r\n    'XPF',\r\n    'MAD',\r\n    'YER',\r\n    'ZMW',\r\n    'ZWL',\r\n    'XBA',\r\n    'XBB',\r\n    'XBC',\r\n    'XBD',\r\n    'XTS',\r\n    'XXX',\r\n    'XAU',\r\n    'XPD',\r\n    'XPT',\r\n    'XAG'\r\n];","import { InjectedIntl } from 'react-intl';\nimport memoizeIntlConstructor from 'intl-format-cache';\n\n// Use a memoized formatter as creating instances of Intl formats is an expensive operation\nconst getNumberFormat = memoizeIntlConstructor(Intl.NumberFormat);\n\nexport const intlStyle = {\n  DECIMAL: 'decimal',\n  PERCENT: 'percent',\n  CURRENCY: 'currency'\n};\n\nexport const defaultFractionDigits = {\n  DECIMAL: 2,\n  PERCENT: 2\n};\n\nexport const extraFractionDigits = {\n  RATE: 2,\n  TECH_RATE: 4\n};\n\n// Find the default minimum fraction digits for a locale and currency code\nexport function getDefaultFractionDigitsForLocale(locale: string, options?: Intl.NumberFormatOptions) {\n  const numberFormat = getNumberFormat(locale, options);\n  const { minimumFractionDigits, maximumFractionDigits } = numberFormat.resolvedOptions();\n  return { minimumFractionDigits, maximumFractionDigits };\n}\n\nexport function getDecimalSeparator({ formatNumber }: InjectedIntl) {\n  const testValue = formatNumber(1.1);\n  return testValue[1];\n}\n\nexport function parseDecimal(value: unknown, decimalSeparator: string) {\n  // Return the value as-is if it's already a number\n  if (typeof value === 'number') {\n    return value;\n  }\n\n  if (typeof value === 'string') {\n    if (value.trim() === '') {\n      return undefined;\n    }\n\n    // Build regex to strip out everything except digits and decimal point\n    const regex = new RegExp(`[^0-9${decimalSeparator}]`, 'g');\n    const parsedValue = parseFloat(\n      value\n        .replace(regex, '') // strip out any cruft\n        .replace(decimalSeparator, '.') // make sure decimal point is standard\n    );\n\n    if (!Number.isNaN(parsedValue)) {\n      return parsedValue;\n    }\n  }\n\n  return undefined;\n}\n","/* eslint-disable react/style-prop-object */\nimport * as React from 'react';\nimport { injectIntl, InjectedIntlProps } from 'react-intl';\nimport { Icon, Input, InputProps } from \"semantic-ui-react\";\n\n\nimport {\n  getDecimalSeparator,\n  getDefaultFractionDigitsForLocale,\n  parseDecimal,\n  intlStyle,\n  defaultFractionDigits,\n  extraFractionDigits\n} from './IntlUtils';\n\nexport const replaceAll = (\n  stringToWorkOn: string,\n  stringToReplace: string,\n  stringToReplaceWith: string,\n  ignoreCase = false\n): string => {\n  const re = new RegExp(\n    stringToReplace.replace(/([/,!\\\\^${}[\\]().*+?|<>\\-&])/g, \"\\\\$&\"),\n    ignoreCase ? \"gi\" : \"g\"\n  );\n  stringToReplaceWith =\n    typeof stringToReplaceWith === \"string\"\n      ? stringToReplaceWith.replace(/\\$/g, \"$$$$\")\n      : stringToReplaceWith;\n  return stringToWorkOn.replace(re, stringToReplaceWith);\n};\n\nconst DECIMAL_REGEX = /[.,]/;\nconst NUMBER_REGEX = /^\\d*[.,]?\\d*$/;\nconst NBSP = '\\u00A0';\n\nexport type NumberEditorChildrenProps = { isInvalid: boolean; getInputProps: () => InputProps; };\nexport type NumberEditorChildren = (props: NumberEditorChildrenProps) => React.ReactNode;\nexport type NumberEditorBaseProps = NumberEditorProps & InjectedIntlProps;\n\nexport type NumberEditorProps = Pick<Intl.NumberFormatOptions, 'style' | 'currency' | 'minimumFractionDigits' | 'maximumFractionDigits'> & {\n  value?: number;\n  defaultFractionDigits?: number;\n  extraFractionDigits?: number;\n  autoFocus?: boolean;\n  children: NumberEditorChildren;\n  onChange: (value?: number) => void;\n};\n\ninterface NumberEditorBaseState {\n  displayValue: string;\n  isInvalid: boolean;\n  isFocused: boolean;\n}\n\nfunction replaceDecimalSeparator(value: string | number | undefined | null, separator: string) {\n  return value != null\n    ? value.toString().replace(DECIMAL_REGEX, separator)\n    : '';\n}\n\nclass NumberEditorBase extends React.Component<NumberEditorBaseProps, NumberEditorBaseState> {\n  readonly decimalSeparator: string;\n  readonly defaultMinimumFractionDigits: number;\n  readonly defaultMaximumFractionDigits: number;\n  readonly state: Readonly<NumberEditorBaseState>;\n\n  input = React.createRef<Input>();\n\n  constructor(props: NumberEditorBaseProps, context?: any) {\n    super(props, context);\n    const { intl, currency, style, minimumFractionDigits, maximumFractionDigits, defaultFractionDigits, extraFractionDigits } = this.props;\n    const {\n      minimumFractionDigits: minimumFractionDigitsForLocale,\n      maximumFractionDigits: maximumFractionDigitsForLocale\n    } = getDefaultFractionDigitsForLocale(intl.locale, { currency, style, minimumFractionDigits, maximumFractionDigits });\n\n    this.decimalSeparator = getDecimalSeparator(intl);\n    this.defaultMinimumFractionDigits = minimumFractionDigitsForLocale\n    this.defaultMaximumFractionDigits = maximumFractionDigitsForLocale;\n    if (typeof minimumFractionDigits === 'undefined' && typeof maximumFractionDigits === 'undefined') {\n      // Only set default values if none of the fraction digits are provided\n      if (typeof defaultFractionDigits !== 'undefined') {\n        this.defaultMinimumFractionDigits = defaultFractionDigits;\n        this.defaultMaximumFractionDigits = defaultFractionDigits;\n      } else if (typeof extraFractionDigits !== 'undefined') {\n        this.defaultMinimumFractionDigits = minimumFractionDigitsForLocale + extraFractionDigits;\n        this.defaultMaximumFractionDigits = minimumFractionDigitsForLocale + extraFractionDigits;\n      }\n    }\n\n    this.state = this.getInitialState();\n  }\n\n  isCopyPaste = false;\n\n  componentDidMount() {\n    const { autoFocus } = this.props;\n    if (autoFocus) {\n      const { current } = this.input;\n      if (current != null) {\n        current.focus();\n      }\n    }\n  }\n\n  componentDidUpdate(prevProps: NumberEditorBaseProps, prevState: NumberEditorBaseState) {\n    const { isInvalid, isFocused } = this.state;\n    // Select the text if the value is invalid or the control is focused\n    if (isInvalid || (prevState.isFocused !== isFocused && isFocused)) {\n      const { current } = this.input;\n      if (current != null) {\n        (current as any).select();\n      }\n    }\n  }\n\n  formatValue(value: number) {\n    const {\n      intl,\n      style,\n      currency,\n      minimumFractionDigits = this.defaultMinimumFractionDigits,\n      maximumFractionDigits = this.defaultMaximumFractionDigits\n    } = this.props;\n    return intl.formatNumber(value, { style, currency, minimumFractionDigits, maximumFractionDigits });\n  }\n\n  testPastedValue(valueToTest: number, pastedValue: string, options: Intl.NumberFormatOptions) {\n    const allowedValue = this.props.intl.formatNumber(valueToTest, options);\n    return pastedValue === replaceAll(allowedValue, NBSP, ' ');\n  }\n\n  isPastedValueValid(pastedValue: string, parsedValue: number) {\n    // If the formatted value is same as the pasted value then it is considered valid\n    // All other values are invalid. This does not handle all the cases as it is difficult\n    // to address all the valid cases. This algorithm will be modified as needed\n    const { maximumFractionDigits = this.defaultMaximumFractionDigits, style, currency } = this.props;\n\n    for (let fractionDigits = 0; fractionDigits <= maximumFractionDigits; fractionDigits++) {\n      if (this.testPastedValue(parsedValue, pastedValue, {\n        style: intlStyle.DECIMAL,\n        minimumFractionDigits: fractionDigits,\n        maximumFractionDigits\n      })) {\n        return true;\n      }\n\n      if (style === intlStyle.CURRENCY) {\n        if (this.testPastedValue(parsedValue, pastedValue, {\n          currency,\n          style,\n          minimumFractionDigits: fractionDigits,\n          maximumFractionDigits\n        })) {\n          return true;\n        }\n      }\n\n      if (style === intlStyle.PERCENT) {\n        if (this.testPastedValue(parsedValue / 100, pastedValue, {\n          style,\n          minimumFractionDigits: fractionDigits,\n          maximumFractionDigits\n        })) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  }\n\n  getValue() {\n    const { value, style } = this.props;\n    if (value != null && style === intlStyle.PERCENT) {\n      return value * 100;\n    }\n    return value;\n  }\n\n  getDisplayValue() {\n    const value = this.getValue();\n    const {\n      intl,\n      minimumFractionDigits = this.defaultMinimumFractionDigits,\n      maximumFractionDigits = this.defaultMaximumFractionDigits\n    } = this.props;\n    return value != null\n      ? intl.formatNumber(value, { style: intlStyle.DECIMAL, minimumFractionDigits, maximumFractionDigits, useGrouping: false })\n      : '';\n  }\n\n  getInitialState() {\n    return {\n      displayValue: this.getDisplayValue(),\n      isInvalid: false,\n      isFocused: false\n    };\n  }\n\n  // TODO: looking for a better type\n  setValue = (stateToSet: any) => {\n    const { style } = this.props;\n    const isValueChanged = stateToSet.hasOwnProperty('value');\n    const { value, ...state } = stateToSet;\n    this.setState(state, () => {\n      let valueToSave = value;\n      if (valueToSave != null && style === intlStyle.PERCENT) {\n        valueToSave /= 100;\n      }\n      if (isValueChanged && this.props.value !== valueToSave) {\n        this.props.onChange(valueToSave);\n      }\n    });\n  };\n\n  handleCopyPaste = (pastedValue: string) => {\n    this.isCopyPaste = false;\n    const parsedValue = parseDecimal(pastedValue, this.decimalSeparator);\n    const isInvalid = parsedValue == null || !this.isPastedValueValid(pastedValue, parsedValue);\n\n    if (isInvalid) {\n      // Show the invalid displayValue, we do not change the underlying value\n      // displayValue will be reverted to the last valid value on the next action (blur, click)\n      this.setValue({\n        isInvalid: true,\n        displayValue: pastedValue\n      });\n      return;\n    }\n\n    // Value is valid, show the value without any formating elements (percentage, currency symbols etc.)\n    this.setValue({\n      isInvalid: false,\n      value: parsedValue,\n      displayValue: replaceDecimalSeparator(parsedValue, this.decimalSeparator)\n    });\n  };\n\n  handleChange = ({ target }: React.ChangeEvent<HTMLInputElement>) => {\n    const { value } = target;\n\n    if (value === '') {\n      this.setValue({ value: undefined, displayValue: '' });\n      return;\n    }\n\n    if (this.isCopyPaste) {\n      this.handleCopyPaste(value);\n      return;\n    }\n\n    // Check if value is a valid number\n    if (NUMBER_REGEX.test(value)) {\n      // Check if value has a decimal separator\n      if (DECIMAL_REGEX.test(value)) {\n        // Replace the decimal separator as per the current locale\n        const displayValue = replaceDecimalSeparator(value, this.decimalSeparator);\n        // Add \"0\" in front if the decimal separator is entered in empty field\n        if (displayValue.length === 1) {\n          this.setValue({ value: 0, displayValue: `0${displayValue}` });\n          return;\n        }\n\n        // Check the precision setting and set the maximum fraction digits.\n        const { maximumFractionDigits = this.defaultMaximumFractionDigits } = this.props;\n        const [displayValueIntegerPart, displayValueDecimalPart] = displayValue.split(this.decimalSeparator);\n\n        if (displayValueDecimalPart.length > maximumFractionDigits) {\n          const roundedDisplayValue = `${displayValueIntegerPart}${this.decimalSeparator}${displayValueDecimalPart.slice(0, maximumFractionDigits)}`;\n          this.setValue({\n            value: parseFloat(replaceDecimalSeparator(roundedDisplayValue, '.')),\n            displayValue: roundedDisplayValue\n          });\n          return;\n        }\n\n        this.setValue({\n          value: parseFloat(replaceDecimalSeparator(value, '.')),\n          displayValue\n        });\n        return;\n      }\n\n      // Value has no decimal separator. Convert value to number and convert\n      // it back to string. This removes the leading 0 i.e 01 -> 1\n      const parsedValue = parseFloat(value);\n      this.setValue({ value: parsedValue, displayValue: parsedValue.toString() });\n    }\n\n    // Value is not a valid number so it is rejected\n  };\n\n  handleFocus = () => {\n    this.setState({ isFocused: true });\n  };\n\n  handleBlur = () => {\n    this.setState({\n      isFocused: false,\n      isInvalid: false,\n      displayValue: this.getDisplayValue()\n    });\n  };\n\n  handleClick = () => {\n    if (this.state.isInvalid) {\n      this.setValue({\n        displayValue: this.getDisplayValue(),\n        isInvalid: false\n      });\n    }\n  };\n\n  handleKeyDown = (e: React.KeyboardEvent<HTMLInputElement>) => {\n    if ((e.ctrlKey || e.metaKey) && !e.altKey && e.keyCode === 86) {\n      this.isCopyPaste = true;\n    }\n  };\n\n  handlePaste = () => {\n    this.isCopyPaste = true;\n  };\n\n  getInputProps = () => {\n    const { value } = this.props;\n    const { displayValue, isFocused } = this.state;\n    const formattedValue = !isFocused && value != null ? this.formatValue(value) : displayValue;\n\n    return {\n      ref: this.input,\n      value: formattedValue,\n      onChange: this.handleChange,\n      onFocus: this.handleFocus,\n      onBlur: this.handleBlur,\n      onKeyDown: this.handleKeyDown,\n      onClick: this.handleClick,\n      onPaste: this.handlePaste\n    };\n  };\n\n  getRenderProps() {\n    const { isInvalid } = this.state;\n\n    return {\n      isInvalid,\n      getInputProps: this.getInputProps\n    };\n  }\n\n  render() {\n    return this.props.children(this.getRenderProps());\n  }\n}\n\nconst NumberEditor = injectIntl(NumberEditorBase);\n\nconst errorMessage =\n  \"Invalid format. Only numbers and single decimal separator are allowed.\";\nconst errorIcon = <Icon name=\"exclamation circle\" link />;\n\ninterface GridNumberEditorProps {\n  defaultValue?: number;\n  autoFocus?: boolean;\n  children?: NumberEditorChildren;\n}\n\ninterface GridNumberEditorState {\n  value?: number;\n}\n\ntype NumberEditorFactoryProps = Pick<NumberEditorProps, 'style' | 'defaultFractionDigits' | 'extraFractionDigits'>;\n\nfunction DefaultGridNumberInput({ getInputProps, isInvalid }: NumberEditorChildrenProps) {\n  return (\n    <Input\n      {...getInputProps()}\n      className={isInvalid ? 'invalidGridInput' : undefined}\n      icon={isInvalid && errorIcon}\n      iconPosition=\"left\" />\n  );\n}\n\nfunction gridNumberEditorFactory<P extends GridNumberEditorProps>(intlProps: NumberEditorFactoryProps): React.ComponentClass<P, GridNumberEditorState> {\n  return class GridNumberEditor extends React.Component<P, GridNumberEditorState> {\n    readonly state: Readonly<GridNumberEditorState> = { value: this.props.defaultValue };\n\n    handleChange = (value?: number) => {\n      this.setState({ value });\n    };\n\n    getValue() {\n      return this.state.value;\n    }\n\n    render() {\n      const { defaultValue, autoFocus, children, ...rest } = this.props;\n      return (\n        <NumberEditor\n          {...intlProps}\n          {...rest}\n          value={this.state.value}\n          onChange={this.handleChange}>\n          {p =>\n            children\n              ? (children as NumberEditorChildren)(p)\n              : <DefaultGridNumberInput {...p} />\n          }\n        </NumberEditor>\n      );\n    }\n  };\n}\n\nexport type GridDecimalEditorProps = GridNumberEditorProps & Pick<NumberEditorBaseProps, 'minimumFractionDigits' | 'maximumFractionDigits'>;\nexport const GridDecimalEditor = gridNumberEditorFactory<GridDecimalEditorProps>({\n  style: intlStyle.DECIMAL,\n  defaultFractionDigits: defaultFractionDigits.DECIMAL\n});\n\nexport type GridPercentEditorProps = GridNumberEditorProps & Pick<NumberEditorBaseProps, 'minimumFractionDigits' | 'maximumFractionDigits'>;\nexport const GridPercentEditor = gridNumberEditorFactory<GridPercentEditorProps>({\n  style: intlStyle.PERCENT,\n  defaultFractionDigits: defaultFractionDigits.PERCENT\n});\n\nexport type GridCurrencyEditorProps = GridNumberEditorProps & Pick<NumberEditorBaseProps, 'minimumFractionDigits' | 'maximumFractionDigits'> & { currency: string; };\nexport const GridCurrencyEditor = gridNumberEditorFactory<GridCurrencyEditorProps>({\n  style: intlStyle.CURRENCY\n});\n\nexport type GridRateEditorProps = GridNumberEditorProps & { currency: string };\nexport const GridRateEditor = gridNumberEditorFactory<GridRateEditorProps>({\n  style: intlStyle.CURRENCY,\n  extraFractionDigits: extraFractionDigits.RATE\n});\n\nexport type GridTechRateEditorProps = GridNumberEditorProps & { currency: string };\nexport const GridTechRateEditor = gridNumberEditorFactory<GridTechRateEditorProps>({\n  style: intlStyle.CURRENCY,\n  extraFractionDigits: extraFractionDigits.TECH_RATE\n});\n\ntype FormNumberEditorProps = Pick<NumberEditorProps, 'value' | 'onChange'> & {\n  children?: NumberEditorChildren;\n};\n\nfunction DefaultFormNumberInput({ getInputProps, isInvalid }: NumberEditorChildrenProps) {\n  return (\n    <div style={{ display: 'inline-block' }}>\n      <Input\n        {...getInputProps()}\n        error={isInvalid} />\n      {isInvalid && <div>{errorMessage}</div>}\n    </div>\n  );\n}\n\nfunction formNumberEditorFactory<P extends FormNumberEditorProps>(intlProps: NumberEditorFactoryProps): React.FunctionComponent<P> {\n  return function FormNumberEditor({ value, onChange, children }: P) {\n    return (\n      <NumberEditor\n        {...intlProps}\n        value={value}\n        onChange={onChange}>\n        {children || DefaultFormNumberInput}\n      </NumberEditor>\n    );\n  };\n}\n\nexport type FormDecimalEditorProps = FormNumberEditorProps & Pick<NumberEditorBaseProps, 'minimumFractionDigits' | 'maximumFractionDigits'>;\nexport const FormDecimalEditor = formNumberEditorFactory<FormDecimalEditorProps>({\n  style: intlStyle.DECIMAL,\n  defaultFractionDigits: defaultFractionDigits.DECIMAL\n});\n\nexport type FormPercentEditorProps = FormNumberEditorProps & Pick<NumberEditorBaseProps, 'minimumFractionDigits' | 'maximumFractionDigits'>;\nexport const FormPercentEditor = formNumberEditorFactory<FormPercentEditorProps>({\n  style: intlStyle.PERCENT,\n  defaultFractionDigits: defaultFractionDigits.PERCENT\n});\n\nexport type FormCurrencyEditorProps = FormNumberEditorProps & Pick<NumberEditorBaseProps, 'minimumFractionDigits' | 'maximumFractionDigits'> & { currency: string; };\nexport const FormCurrencyEditor = formNumberEditorFactory<FormCurrencyEditorProps>({\n  style: intlStyle.CURRENCY\n});\n\nexport type FormRateEditorProps = FormNumberEditorProps & { currency: string };\nexport const FormRateEditor = formNumberEditorFactory<FormRateEditorProps>({\n  style: intlStyle.CURRENCY,\n  extraFractionDigits: extraFractionDigits.RATE\n});\n\nexport type FormTechRateEditorProps = FormNumberEditorProps & { currency: string };\nexport const FormTechRateEditor = formNumberEditorFactory<FormTechRateEditorProps>({\n  style: intlStyle.CURRENCY,\n  extraFractionDigits: extraFractionDigits.TECH_RATE\n});\n","type Omit<T, K extends keyof T> = Pick<T, Exclude<keyof T, K>>;\n/* eslint-disable react/style-prop-object */\nimport * as React from 'react';\nimport { FormattedNumber, injectIntl, InjectedIntlProps } from 'react-intl';\n\nimport {\n  getDefaultFractionDigitsForLocale,\n  intlStyle,\n  defaultFractionDigits,\n  extraFractionDigits\n} from './IntlUtils';\n\nexport interface IntegerFormatterProps {\n  // TODO: should it be a string and parsed before formatting?\n  value: number | undefined | null;\n}\n\ninterface FormatterProps extends IntegerFormatterProps {\n  /**\n   * The minimum number of fraction digits to use. Possible values are from 0 to 20;\n   * the default for plain number and percent formatting is 0; the default for currency\n   * formatting is the number of minor unit digits provided by the ISO 4217 currency code list\n   */\n  minimumFractionDigits?: number;\n\n  /**\n   * The maximum number of fraction digits to use. Possible values are from 0 to 20;\n   * the default for plain number formatting is the larger of minimumFractionDigits and 3;\n   * the default for currency formatting is the larger of minimumFractionDigits and\n   * the number of minor unit digits provided by the ISO 4217 currency code list\n   */\n  maximumFractionDigits?: number;\n}\n\ntype NumberFormatterProps = Omit<FormattedNumber.Props, 'value'> & IntegerFormatterProps & { defaultFractionDigits?: number; };\n\nfunction NumberFormatter({ value, defaultFractionDigits, ...props }: NumberFormatterProps) {\n  if (value == null) {\n    return null;\n  }\n\n  const { minimumFractionDigits, maximumFractionDigits } = props;\n  const extraProps: Partial<FormattedNumber.Props> = {};\n  if (typeof minimumFractionDigits === 'undefined' && typeof maximumFractionDigits === 'undefined' && typeof defaultFractionDigits !== 'undefined') {\n    extraProps.minimumFractionDigits = defaultFractionDigits;\n    extraProps.maximumFractionDigits = defaultFractionDigits;\n  }\n\n  return <FormattedNumber value={value} {...props} {...extraProps} />;\n}\n\nexport type DecimalFormatterProps = FormatterProps;\n\nexport function DecimalFormatter(props: DecimalFormatterProps) {\n  return (\n    <NumberFormatter\n      {...props}\n      style={intlStyle.DECIMAL}\n      defaultFractionDigits={defaultFractionDigits.DECIMAL} />\n  );\n}\n\nexport function IntegerFormatter(props: IntegerFormatterProps) {\n  return (\n    <DecimalFormatter\n      {...props}\n      maximumFractionDigits={0} />\n  );\n}\n\nexport type UnitsFormatterProps = IntegerFormatterProps;\n\nexport { IntegerFormatter as UnitsFormatter };\n\nexport type PercentFormatterProps = FormatterProps;\n\nexport function PercentFormatter(props: PercentFormatterProps) {\n  return (\n    <NumberFormatter\n      {...props}\n      style={intlStyle.PERCENT}\n      defaultFractionDigits={defaultFractionDigits.PERCENT} />\n  );\n}\n\nexport interface CurrencyFormatterProps extends FormatterProps {\n  /**\n   * The currency to use in currency formatting. Possible values are the ISO 4217 currency codes,\n   * such as \"USD\" for the US dollar, \"EUR\" for the euro, or \"CNY\" for the Chinese RMB\n   */\n  currency: string;\n}\n\nexport function CurrencyFormatter(props: CurrencyFormatterProps) {\n  return <NumberFormatter {...props} style={intlStyle.CURRENCY} />;\n}\n\nexport type DefaultCurrencyFormatterProps = Pick<CurrencyFormatterProps, 'value' | 'currency'>;\ntype DefaultCurrencyFormatterBaseProps = RateFormatterProps & InjectedIntlProps & { extraFractionDigits: number };\n\nfunction DefaultCurrencyFormatterBase({ intl, extraFractionDigits, ...props }: DefaultCurrencyFormatterBaseProps) {\n  // Add extra fraction digits to the default minimum fraction digits for the current locale and currency\n  const defaultFractionDigits = getDefaultFractionDigitsForLocale(\n    intl.locale, {\n      style: intlStyle.CURRENCY,\n      currency: props.currency\n    }\n  ).minimumFractionDigits + extraFractionDigits;\n\n  return (\n    <CurrencyFormatter\n      {...props}\n      minimumFractionDigits={defaultFractionDigits}\n      maximumFractionDigits={defaultFractionDigits} />\n  );\n}\n\nexport const DefaultCurrencyFormatter = injectIntl(DefaultCurrencyFormatterBase);\n\nexport type RateFormatterProps = DefaultCurrencyFormatterProps;\n\nexport function RateFormatter(props: RateFormatterProps) {\n  return (\n    <DefaultCurrencyFormatter\n      {...props}\n      extraFractionDigits={extraFractionDigits.RATE} />\n  );\n}\n\nexport type TechRateFormatterProps = DefaultCurrencyFormatterProps;\n\nexport function TechRateFormatter(props: TechRateFormatterProps) {\n  return (\n    <DefaultCurrencyFormatter\n      {...props}\n      extraFractionDigits={extraFractionDigits.TECH_RATE} />\n  );\n}\n","import './index.css';\nimport * as React from \"react\";\nimport { render } from \"react-dom\";\nimport { IntlProvider, addLocaleData } from \"react-intl\";\n\nimport { currencyCode } from './currenyCode';\n\nimport {\n  GridDecimalEditor,\n  GridCurrencyEditor,\n  GridPercentEditor,\n  GridRateEditor\n} from \"./IntlEditors\";\n\nimport {\n  DecimalFormatter,\n  CurrencyFormatter,\n  PercentFormatter,\n  RateFormatter,\n  TechRateFormatter\n} from \"./IntlFormatters\";\n\nconst en = require(\"react-intl/locale-data/en\");\nconst fr = require(\"react-intl/locale-data/fr\");\nconst is = require(\"react-intl/locale-data/is\");\n\naddLocaleData([...en, ...fr, ...is]);\n\nclass Editors extends React.Component {\n  state = {\n    locale: \"en-US\",\n    minimumFractionDigits: 3,\n    maximumFractionDigits: 4,\n    currencyCode: \"USD\"\n  };\n  handleChange = e => {\n    console.log({ [e.target.name]: e.target.value })\n    this.setState({ [e.target.name]: e.target.value });\n  };\n\n  public render() {\n    const key = `${this.state.locale}-${this.state.currencyCode}-${this.state.minimumFractionDigits}-${this.state.maximumFractionDigits}`;\n    return (\n      <IntlProvider locale={this.state.locale} key={key}>\n        <div>\n          <fieldset>\n            <legend>Editors</legend>\n            <div style={{ margin: 20 }}>\n              <div style={{ marginTop: 20 }}>\n                <label>\n                  Locale:\n                  <select\n                    name=\"locale\"\n                    value={this.state.locale}\n                    onChange={this.handleChange}\n                  >\n                    <option value=\"fr-FR\">fr-FR</option>\n                    <option value=\"en-US\">en-US</option>\n                    <option value=\"en-GB\">en-GB</option>\n                    <option value=\"is-IS\">is-IS</option>\n                  </select>\n                </label>\n              </div>\n              <div style={{ marginTop: 20 }}>\n                <label>\n                  minimumFractionDigits:\n                  <input\n                    type=\"number\"\n                    name=\"minimumFractionDigits\"\n                    value={this.state.minimumFractionDigits}\n                    onChange={this.handleChange}\n                  />\n                </label>\n              </div>\n              <div style={{ marginTop: 20 }}>\n                <label>\n                  maximumFractionDigits:\n                  <input\n                    type=\"number\"\n                    name=\"maximumFractionDigits\"\n                    value={this.state.maximumFractionDigits}\n                    onChange={this.handleChange}\n                  />\n                </label>\n              </div>\n              <div style={{ marginTop: 20 }}>\n                <label>\n                  currency code:\n                  <select\n                    name=\"currencyCode\"\n                    value={this.state.currencyCode}\n                    onChange={this.handleChange}\n                  >\n                    {currencyCode.sort().map(c => <option value={c}>{c}</option>)}\n                  </select>\n                </label>\n              </div>\n              <div style={{ marginTop: 20 }}>\n                <label>\n                  Grid Decimal Editor:\n                  <GridDecimalEditor\n                    defaultValue={2}\n                    minimumFractionDigits={this.state.minimumFractionDigits || undefined}\n                    maximumFractionDigits={this.state.maximumFractionDigits || undefined}\n                  />\n                </label>\n              </div>\n              <div style={{ marginTop: 20 }}>\n                <label>\n                  Grid Currency Editor:\n                  <GridCurrencyEditor\n                    defaultValue={2}\n                    currency={this.state.currencyCode}\n                    minimumFractionDigits={this.state.minimumFractionDigits || undefined}\n                    maximumFractionDigits={this.state.maximumFractionDigits || undefined}\n                  />\n                </label>\n              </div>\n              <div style={{ marginTop: 20 }}>\n                <label>\n                  Grid Percent Editor:\n                  <GridPercentEditor\n                    defaultValue={0.2}\n                    minimumFractionDigits={this.state.minimumFractionDigits || undefined}\n                    maximumFractionDigits={this.state.maximumFractionDigits || undefined}\n                  />\n                </label>\n              </div>\n              <div style={{ marginTop: 20 }}>\n                <label>\n                  Grid Rate Editor:\n                  <GridRateEditor\n                    defaultValue={20}\n                    currency={this.state.currencyCode}\n                  />\n                </label>\n              </div>\n            </div>\n          </fieldset>\n        </div>\n      </IntlProvider>\n    );\n  }\n}\n\nclass Formatters extends React.Component {\n  state = {\n    locale: \"en-US\",\n    minimumFractionDigits: 3,\n    maximumFractionDigits: 4,\n    currencyCode: \"USD\",\n    currencyFormatterValue: 2,\n    decimalFormatterValue: 1.2,\n    percentFormatterValue: 0.2,\n    rateFormatterValue: 3.4,\n    techRateFormatterValue: 1.2\n  };\n  handleChange = e => {\n    this.setState({ [e.target.name]: e.target.value });\n  };\n\n  public render() {\n    const key = `${this.state.locale}-${this.state.currencyCode}-${this.state.minimumFractionDigits}-${this.state.maximumFractionDigits}`;\n    return (\n      <IntlProvider locale={this.state.locale} key={key}>\n        <div>\n          <fieldset>\n            <legend>Formatters</legend>\n            <div style={{ margin: 20 }}>\n              <div style={{ marginTop: 20 }}>\n                <label>\n                  Locale:\n                  <select\n                    name=\"locale\"\n                    value={this.state.locale}\n                    onChange={this.handleChange}\n                  >\n                    <option value=\"fr-FR\">fr-FR</option>\n                    <option value=\"en-US\">en-US</option>\n                    <option value=\"en-GB\">en-GB</option>\n                    <option value=\"is-IS\">is-IS</option>\n                  </select>\n                </label>\n              </div>\n              <div style={{ marginTop: 20 }}>\n                <label>\n                  minimumFractionDigits:\n                  <input\n                    type=\"number\"\n                    name=\"minimumFractionDigits\"\n                    value={this.state.minimumFractionDigits}\n                    onChange={this.handleChange}\n                  />\n                </label>\n              </div>\n              <div style={{ marginTop: 20 }}>\n                <label>\n                  maximumFractionDigits:\n                  <input\n                    type=\"number\"\n                    name=\"maximumFractionDigits\"\n                    value={this.state.maximumFractionDigits}\n                    onChange={this.handleChange}\n                  />\n                </label>\n              </div>\n              <div style={{ marginTop: 20 }}>\n                <label>\n                  currency code:\n                  <select\n                    name=\"currencyCode\"\n                    value={this.state.currencyCode}\n                    onChange={this.handleChange}\n                  >\n                    {currencyCode.sort().map(c => <option value={c}>{c}</option>)}\n                  </select>\n                </label>\n              </div>\n\n              <div style={{ marginTop: 20 }}>\n                <label>\n                  Decimal Formatter:\n                  <input\n                    type=\"number\"\n                    name=\"decimalFormatterValue\"\n                    value={this.state.decimalFormatterValue}\n                    onChange={this.handleChange}\n                  />\n                  <DecimalFormatter\n                    value={this.state.decimalFormatterValue}\n                    minimumFractionDigits={this.state.minimumFractionDigits || undefined}\n                    maximumFractionDigits={this.state.maximumFractionDigits || undefined}\n                  />\n                </label>\n              </div>\n\n              <div style={{ marginTop: 20 }}>\n                <label>\n                  CurrencyFormatter:\n                  <input\n                    type=\"number\"\n                    name=\"currencyFormatterValue\"\n                    value={this.state.currencyFormatterValue}\n                    onChange={this.handleChange}\n                  />\n                  <CurrencyFormatter\n                    value={this.state.currencyFormatterValue}\n                    currency={this.state.currencyCode}\n                    minimumFractionDigits={this.state.minimumFractionDigits || undefined}\n                    maximumFractionDigits={this.state.maximumFractionDigits || undefined}\n                  />\n                </label>\n              </div>\n\n              <div style={{ marginTop: 20 }}>\n                <label>\n                  PercentFormatter:\n                  <input\n                    type=\"number\"\n                    name=\"percentFormatterValue\"\n                    value={this.state.percentFormatterValue}\n                    onChange={this.handleChange}\n                  />\n                  <PercentFormatter\n                    value={this.state.percentFormatterValue}\n                    minimumFractionDigits={this.state.minimumFractionDigits || undefined}\n                    maximumFractionDigits={this.state.maximumFractionDigits || undefined}\n                  />\n                </label>\n              </div>\n\n              <div style={{ marginTop: 20 }}>\n                <label>\n                  Rate Formatter:\n                  <input\n                    type=\"number\"\n                    name=\"rateFormatterValue\"\n                    value={this.state.rateFormatterValue}\n                    onChange={this.handleChange}\n                  />\n                  <RateFormatter\n                    value={this.state.rateFormatterValue}\n                    currency={this.state.currencyCode}\n                  />\n                </label>\n              </div>\n\n              <div style={{ marginTop: 20 }}>\n                <label>\n                  Tech Rate Formatter:\n                  <input\n                    type=\"number\"\n                    name=\"techRateFormatterValue\"\n                    value={this.state.techRateFormatterValue}\n                    onChange={this.handleChange}\n                  />\n                  <TechRateFormatter\n                    value={this.state.techRateFormatterValue}\n                    currency={this.state.currencyCode}\n                  />\n                </label>\n              </div>\n            </div>\n          </fieldset>\n        </div>\n      </IntlProvider>\n    );\n  }\n}\n\nclass App extends React.Component {\n  componentDidCatch() {\n    console.log('An error occurred');\n  }\n\n  render() {\n    return (\n      <div>\n        <Editors />\n        <Formatters />\n      </div>\n    );\n  }\n}\n\nrender(\n  <App />,\n  document.getElementById(\"root\")\n);"],"sourceRoot":""}