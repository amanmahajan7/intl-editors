{"version":3,"sources":["IntlUtils.tsx","IntlEditors.tsx","IntlFormatters.tsx","index.tsx"],"names":["getNumberFormat","memoizeIntlConstructor","Intl","NumberFormat","intlStyle","DECIMAL","PERCENT","CURRENCY","defaultFractionDigits","extraFractionDigits","RATE","TECH_RATE","getDefaultFractionDigitsForLocale","locale","options","_numberFormat$resolve","resolvedOptions","minimumFractionDigits","maximumFractionDigits","DECIMAL_REGEX","NUMBER_REGEX","replaceDecimalSeparator","value","separator","toString","replace","NumberEditorBase","props","context","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","decimalSeparator","defaultMinimumFractionDigits","defaultMaximumFractionDigits","state","isCopyPaste","setValue","stateToSet","style","isValueChanged","hasOwnProperty","objectWithoutProperties","setState","valueToSave","onChange","showLastValidValue","isInvalid","displayValue","handleCopyPaste","pastedValue","parsedValue","trim","regex","RegExp","concat","parseFloat","Number","isNaN","undefined","parseDecimal","isPastedValueValid","handleChange","_ref","target","test","length","_this$props$maximumFr","_displayValue$split","split","_displayValue$split2","slicedToArray","displayValueIntegerPart","displayValueDecimalPart","roundedDisplayValue","slice","handleFocus","isFocused","handleBlur","handleClick","handleKeyDown","e","ctrlKey","metaKey","altKey","keyCode","handlePaste","getInputProps","_this$state","formatValue","onFocus","onBlur","onKeyDown","onClick","onPaste","_this$props","intl","currency","_getDefaultFractionDi","minimumFractionDigitsForLocale","maximumFractionDigitsForLocale","formatNumber","getInitialState","select","_this$props2","_this$props2$minimumF","_this$props2$maximumF","_this2","allowedFormatOptions","_this$props$maximumFr2","fractionDigits","push","some","allowedValue","stringToWorkOn","stringToReplace","stringToReplaceWith","ignoreCase","arguments","re","replaceAll","children","getRenderProps","React","NumberEditor","injectIntl","errorMessage","errorIcon","react","Icon","name","link","DefaultGridNumberInput","_ref2","inputRef","Input","assign","ref","error","icon","iconPosition","gridNumberEditorFactory","intlProps","_React$Component2","GridNumberEditor","_getPrototypeOf2","_this3","_len","args","Array","_key","apply","input","defaultValue","focus","current","inherits","createClass","key","autoFocus","_this4","_this$props3","rest","p","GridDecimalEditor","GridPercentEditor","GridCurrencyEditor","GridRateEditor","DefaultFormNumberInput","_ref3","display","formNumberEditorFactory","_ref4","NumberFormatter","extraProps","index_es","DecimalFormatter","PercentFormatter","CurrencyFormatter","DefaultCurrencyFormatter","RateFormatter","TechRateFormatter","en","require","fr","is","addLocaleData","toConsumableArray","Editors","currencyCode","console","log","defineProperty","margin","marginTop","type","Formatters","currencyFormatterValue","decimalFormatterValue","percentFormatterValue","rateFormatterValue","techRateFormatterValue","render","src_Editors","src_Formatters","document","getElementById"],"mappings":"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","file":"static/js/main.defe66f0.chunk.js","sourcesContent":["import { InjectedIntl } from 'react-intl';\nimport memoizeIntlConstructor from 'intl-format-cache';\n\n// Use a memoized formatter as creating instances of Intl formats is an expensive operation\nconst getNumberFormat = memoizeIntlConstructor(Intl.NumberFormat);\n\nexport const intlStyle = {\n  DECIMAL: 'decimal',\n  PERCENT: 'percent',\n  CURRENCY: 'currency'\n};\n\nexport const defaultFractionDigits = {\n  DECIMAL: 2,\n  PERCENT: 2\n};\n\nexport const extraFractionDigits = {\n  RATE: 2,\n  TECH_RATE: 4\n};\n\n// Find the default minimum fraction digits for a locale and currency code\nexport function getDefaultFractionDigitsForLocale(locale: string, options?: Intl.NumberFormatOptions) {\n  const numberFormat = getNumberFormat(locale, options);\n  const { minimumFractionDigits, maximumFractionDigits } = numberFormat.resolvedOptions();\n  return { minimumFractionDigits, maximumFractionDigits };\n}\n\nexport function getDecimalSeparator({ formatNumber }: InjectedIntl) {\n  const testValue = formatNumber(1.1);\n  return testValue[1];\n}\n\nexport function parseDecimal(value: unknown, decimalSeparator: string) {\n  // Return the value as-is if it's already a number\n  if (typeof value === 'number') {\n    return value;\n  }\n\n  if (typeof value === 'string') {\n    if (value.trim() === '') {\n      return undefined;\n    }\n\n    // Build regex to strip out everything except digits and decimal point\n    const regex = new RegExp(`[^0-9${decimalSeparator}]`, 'g');\n    const parsedValue = parseFloat(\n      value\n        .replace(regex, '') // strip out any cruft\n        .replace(decimalSeparator, '.') // make sure decimal point is standard\n    );\n\n    return !Number.isNaN(parsedValue) ? parsedValue : undefined;\n  }\n\n  // TODO: What should be the default value?\n  return undefined;\n}\n","/* eslint-disable react/style-prop-object */\nimport * as React from 'react';\nimport { injectIntl, InjectedIntlProps } from 'react-intl';\nimport { Icon, Input } from \"semantic-ui-react\";\n\n\nimport {\n  getDecimalSeparator,\n  getDefaultFractionDigitsForLocale,\n  parseDecimal,\n  intlStyle,\n  defaultFractionDigits,\n  extraFractionDigits\n} from './IntlUtils';\n\nexport const replaceAll = (\n  stringToWorkOn: string,\n  stringToReplace: string,\n  stringToReplaceWith: string,\n  ignoreCase = false\n): string => {\n  const re = new RegExp(\n    stringToReplace.replace(/([/,!\\\\^${}[\\]().*+?|<>\\-&])/g, \"\\\\$&\"),\n    ignoreCase ? \"gi\" : \"g\"\n  );\n  stringToReplaceWith =\n    typeof stringToReplaceWith === \"string\"\n      ? stringToReplaceWith.replace(/\\$/g, \"$$$$\")\n      : stringToReplaceWith;\n  return stringToWorkOn.replace(re, stringToReplaceWith);\n};\n\nconst DECIMAL_REGEX = /[.,]/;\nconst NUMBER_REGEX = /^\\d*[.,]?\\d*$/;\nconst NBSP = '\\u00A0';\n\ntype InputProps = Pick<\n  React.InputHTMLAttributes<HTMLInputElement>,\n  'value' | 'onChange' | 'onFocus' | 'onBlur' | 'onKeyDown' | 'onClick' | 'onPaste'\n>;\ntype NumberEditorChildrenProps = { isInvalid: boolean; getInputProps: () => InputProps; };\ntype NumberEditorChildren = (props: NumberEditorChildrenProps) => React.ReactNode;\ntype NumberEditorBaseProps = NumberEditorProps & InjectedIntlProps;\n\ntype NumberEditorProps = Pick<Intl.NumberFormatOptions, 'style' | 'currency' | 'minimumFractionDigits' | 'maximumFractionDigits'> & {\n  value?: number;\n  defaultFractionDigits?: number;\n  extraFractionDigits?: number;\n  onChange: (value?: number) => void;\n  select?: () => void;\n  children: NumberEditorChildren;\n};\n\ninterface NumberEditorBaseState {\n  displayValue: string;\n  isInvalid: boolean;\n  isFocused: boolean;\n}\n\nfunction replaceDecimalSeparator(value: string | number | undefined | null, separator: string) {\n  return value != null\n    ? value.toString().replace(DECIMAL_REGEX, separator)\n    : '';\n}\n\nclass NumberEditorBase extends React.Component<NumberEditorBaseProps, NumberEditorBaseState> {\n  readonly decimalSeparator: string;\n  readonly defaultMinimumFractionDigits?: number;\n  readonly defaultMaximumFractionDigits: number;\n  readonly state: Readonly<NumberEditorBaseState>;\n\n  constructor(props: NumberEditorBaseProps, context?: any) {\n    super(props, context);\n    const { intl, currency, style, minimumFractionDigits, maximumFractionDigits, defaultFractionDigits, extraFractionDigits } = this.props;\n    const {\n      minimumFractionDigits: minimumFractionDigitsForLocale,\n      maximumFractionDigits: maximumFractionDigitsForLocale\n    } = getDefaultFractionDigitsForLocale(intl.locale, { currency, style, minimumFractionDigits, maximumFractionDigits });\n\n    this.decimalSeparator = getDecimalSeparator(intl);\n    this.defaultMaximumFractionDigits = maximumFractionDigitsForLocale;\n    if (typeof minimumFractionDigits === 'undefined' && typeof maximumFractionDigits === 'undefined') {\n      // Only set default values if none of the fraction digits are provided\n      if (typeof defaultFractionDigits !== 'undefined') {\n        this.defaultMinimumFractionDigits = defaultFractionDigits;\n        this.defaultMaximumFractionDigits = defaultFractionDigits;\n      } else if (typeof extraFractionDigits !== 'undefined') {\n        this.defaultMinimumFractionDigits = minimumFractionDigitsForLocale + extraFractionDigits;\n        this.defaultMaximumFractionDigits = minimumFractionDigitsForLocale + extraFractionDigits;\n      }\n    }\n\n    this.state = this.getInitialState();\n  }\n\n  isCopyPaste = false;\n\n  componentDidUpdate() {\n    if (this.state.isInvalid) {\n      // Select the value if it is invalid\n      const { select } = this.props;\n      if (select) {\n        select();\n      }\n    }\n  }\n\n  formatValue(value: number) {\n    const {\n      intl,\n      style,\n      currency,\n      minimumFractionDigits = this.defaultMinimumFractionDigits,\n      maximumFractionDigits = this.defaultMaximumFractionDigits\n    } = this.props;\n    return intl.formatNumber(value, { style, currency, minimumFractionDigits, maximumFractionDigits });\n  }\n\n  isPastedValueValid(pastedValue: string, parsedValue: number) {\n    const allowedFormatOptions: Intl.NumberFormatOptions[] = [];\n    const { maximumFractionDigits = this.defaultMaximumFractionDigits } = this.props;\n\n    for (let fractionDigits = 0; fractionDigits <= maximumFractionDigits; fractionDigits++) {\n      allowedFormatOptions.push({\n        style: intlStyle.DECIMAL,\n        minimumFractionDigits: fractionDigits,\n        maximumFractionDigits\n      });\n\n      if (this.props.style === intlStyle.CURRENCY) {\n        allowedFormatOptions.push({\n          style: intlStyle.CURRENCY,\n          currency: this.props.currency,\n          minimumFractionDigits: fractionDigits,\n          maximumFractionDigits\n        });\n      }\n    }\n\n    // If the formatted value is same as the pasted value then it is considered valid\n    // All other values are invalid. This does not handle all the cases as it is difficult\n    // to address all the valid cases. This algorithm will be modified as needed\n    return allowedFormatOptions.some(options => {\n      const allowedValue = this.props.intl.formatNumber(parsedValue, options);\n      return pastedValue === replaceAll(allowedValue, NBSP, ' ');\n    });\n  }\n\n  getInitialState() {\n    const { style } = this.props;\n    let { value } = this.props;\n    if (value != null && style === intlStyle.PERCENT) {\n      value *= 100;\n    }\n\n    return {\n      displayValue: replaceDecimalSeparator(value, this.decimalSeparator),\n      isInvalid: false,\n      isFocused: false\n    };\n  }\n\n  // TODO: looking for a better type\n  setValue = (stateToSet: any) => {\n    const { style } = this.props;\n    const isValueChanged = stateToSet.hasOwnProperty('value');\n    const { value, ...state } = stateToSet;\n    this.setState(state, () => {\n      let valueToSave = value;\n      if (valueToSave != null && style === intlStyle.PERCENT) {\n        valueToSave /= 100;\n      }\n      if (isValueChanged && this.props.value !== valueToSave) {\n        this.props.onChange(valueToSave);\n      }\n    });\n  };\n\n  showLastValidValue = () => {\n    if (this.state.isInvalid) {\n      const { value } = this.props;\n      this.setValue({\n        displayValue: replaceDecimalSeparator(value, this.decimalSeparator),\n        isInvalid: false\n      });\n    }\n  };\n\n  handleCopyPaste = (pastedValue: string) => {\n    this.isCopyPaste = false;\n    const parsedValue = parseDecimal(pastedValue, this.decimalSeparator);\n    const isInvalid = parsedValue == null || !this.isPastedValueValid(pastedValue, parsedValue);\n\n    if (isInvalid) {\n      // Show the invalid displayValue, we do not change the underlying value\n      // displayValue will be reverted to the last valid value on the next action (blur, click)\n      this.setValue({\n        isInvalid: true,\n        displayValue: pastedValue\n      });\n      return;\n    }\n\n    // Value is valid, show the value without any formating elements (percentage, currency symbols etc.)\n    this.setValue({\n      isInvalid: false,\n      value: parsedValue,\n      displayValue: replaceDecimalSeparator(parsedValue, this.decimalSeparator)\n    });\n  };\n\n  handleChange = ({ target }: React.ChangeEvent<HTMLInputElement>) => {\n    const { value } = target;\n\n    if (value === '') {\n      this.setValue({ value: undefined, displayValue: '' });\n      return;\n    }\n\n    if (this.isCopyPaste) {\n      this.handleCopyPaste(value);\n      return;\n    }\n\n    // Check if value is a valid number\n    if (NUMBER_REGEX.test(value)) {\n      // Check if value has a decimal separator\n      if (DECIMAL_REGEX.test(value)) {\n        // Replace the decimal separator as per the current locale\n        const displayValue = replaceDecimalSeparator(value, this.decimalSeparator);\n        // Add \"0\" in front if the decimal separator is entered in empty field\n        if (displayValue.length === 1) {\n          this.setValue({ value: 0, displayValue: `0${displayValue}` });\n          return;\n        }\n\n        // Check the precision setting and set the maximum fraction digits.\n        const { maximumFractionDigits = this.defaultMaximumFractionDigits } = this.props;\n        const [displayValueIntegerPart, displayValueDecimalPart] = displayValue.split(this.decimalSeparator);\n\n        if (displayValueDecimalPart.length > maximumFractionDigits) {\n          const roundedDisplayValue = `${displayValueIntegerPart}${this.decimalSeparator}${displayValueDecimalPart.slice(0, maximumFractionDigits)}`;\n          this.setValue({\n            value: parseFloat(replaceDecimalSeparator(roundedDisplayValue, '.')),\n            displayValue: roundedDisplayValue\n          });\n          return;\n        }\n\n        this.setValue({\n          value: parseFloat(replaceDecimalSeparator(value, '.')),\n          displayValue\n        });\n        return;\n      }\n\n      // Value has no decimal separator. Convert value to number and convert\n      // it back to string. This removes the leading 0 i.e 01 -> 1\n      const parsedValue = parseFloat(value);\n      this.setValue({ value: parsedValue, displayValue: parsedValue.toString() });\n    }\n\n    // Value is not a valid number so it is rejected\n  };\n\n  handleFocus = () => {\n    this.setState({ isFocused: true });\n  };\n\n  handleBlur = () => {\n    this.setState({ isFocused: false });\n    this.showLastValidValue();\n  };\n\n  handleClick = () => {\n    this.showLastValidValue();\n  };\n\n  handleKeyDown = (e: React.KeyboardEvent<HTMLInputElement>) => {\n    if ((e.ctrlKey || e.metaKey) && !e.altKey && e.keyCode === 86) {\n      this.isCopyPaste = true;\n    }\n  };\n\n  handlePaste = () => {\n    this.isCopyPaste = true;\n  };\n\n  getInputProps = () => {\n    const { value } = this.props;\n    const { displayValue, isFocused } = this.state;\n    const formattedValue = !isFocused && value != null ? this.formatValue(value) : displayValue;\n\n    return {\n      value: formattedValue,\n      onChange: this.handleChange,\n      onFocus: this.handleFocus,\n      onBlur: this.handleBlur,\n      onKeyDown: this.handleKeyDown,\n      onClick: this.handleClick,\n      onPaste: this.handlePaste\n    };\n  };\n\n  getRenderProps() {\n    const { isInvalid } = this.state;\n\n    return {\n      isInvalid,\n      getInputProps: this.getInputProps\n    };\n  }\n\n  render() {\n    return this.props.children(this.getRenderProps());\n  }\n}\n\nconst NumberEditor = injectIntl(NumberEditorBase);\n\nconst errorMessage =\n  \"Invalid format. Only numbers and single decimal separator are allowed.\";\nconst errorIcon = <Icon name=\"exclamation circle\" link />;\n\ninterface GridNumberEditorProps {\n  defaultValue?: number;\n  autoFocus?: boolean;\n  children?: NumberEditorChildren;\n}\n\ninterface GridNumberEditorState {\n  value?: number;\n}\n\ntype NumberEditorFactoryProps = Pick<NumberEditorProps, 'style' | 'defaultFractionDigits' | 'extraFractionDigits'>;\n\nfunction DefaultGridNumberInput({ getInputProps, isInvalid, inputRef }: NumberEditorChildrenProps & { inputRef: React.RefObject<Input> }) {\n  return (\n    <Input\n      {...getInputProps()}\n      ref={inputRef}\n      error={isInvalid}\n      icon={isInvalid && errorIcon}\n      iconPosition=\"left\" />\n  );\n}\n\nfunction gridNumberEditorFactory<P extends GridNumberEditorProps>(intlProps: NumberEditorFactoryProps): React.ComponentClass<P, GridNumberEditorState> {\n  return class GridNumberEditor extends React.Component<P, GridNumberEditorState> {\n    input = React.createRef<Input>();\n    readonly state: Readonly<GridNumberEditorState> = { value: this.props.defaultValue };\n\n    componentDidMount() {\n      const { autoFocus } = this.props;\n      if (autoFocus) {\n        this.focus();\n      }\n    }\n\n    handleChange = (value?: number) => {\n      this.setState({ value });\n    };\n\n    focus = () => {\n      const { current } = this.input;\n      if (current != null) {\n        current.focus();\n      }\n    };\n\n    select = () => {\n      const { current } = this.input;\n      if (current != null) {\n        (current as any).select();\n      }\n    };\n\n    getValue() {\n      return this.state.value;\n    }\n\n    render() {\n      const { defaultValue, autoFocus, children, ...rest } = this.props;\n      return (\n        <NumberEditor\n          {...intlProps}\n          {...rest}\n          value={this.state.value}\n          onChange={this.handleChange}\n          select={this.select}>\n          {p =>\n            children\n              ? (children as NumberEditorChildren)(p)\n              : <DefaultGridNumberInput {...p} inputRef={this.input} />\n          }\n        </NumberEditor>\n      );\n    }\n  };\n}\n\nexport type GridDecimalEditorProps = GridNumberEditorProps & Pick<NumberEditorBaseProps, 'minimumFractionDigits' | 'maximumFractionDigits'>;\nexport const GridDecimalEditor = gridNumberEditorFactory<GridDecimalEditorProps>({\n  style: intlStyle.DECIMAL,\n  defaultFractionDigits: defaultFractionDigits.DECIMAL\n});\n\nexport type GridPercentEditorProps = GridNumberEditorProps & Pick<NumberEditorBaseProps, 'minimumFractionDigits' | 'maximumFractionDigits'>;\nexport const GridPercentEditor = gridNumberEditorFactory<GridPercentEditorProps>({\n  style: intlStyle.PERCENT,\n  defaultFractionDigits: defaultFractionDigits.PERCENT\n});\n\nexport type GridCurrencyEditorProps = GridNumberEditorProps & Pick<NumberEditorBaseProps, 'minimumFractionDigits' | 'maximumFractionDigits'> & { currency: string; };\nexport const GridCurrencyEditor = gridNumberEditorFactory<GridCurrencyEditorProps>({\n  style: intlStyle.CURRENCY\n});\n\nexport type GridRateEditorProps = GridNumberEditorProps & { currency: string };\nexport const GridRateEditor = gridNumberEditorFactory<GridRateEditorProps>({\n  style: intlStyle.CURRENCY,\n  extraFractionDigits: extraFractionDigits.RATE\n});\n\nexport type GridTechRateEditorProps = GridNumberEditorProps & { currency: string };\nexport const GridTechRateEditor = gridNumberEditorFactory<GridTechRateEditorProps>({\n  style: intlStyle.CURRENCY,\n  extraFractionDigits: extraFractionDigits.TECH_RATE\n});\n\ntype FormNumberEditorProps = Pick<NumberEditorProps, 'value' | 'onChange'> & {\n  children?: NumberEditorChildren;\n};\n\nfunction DefaultFormNumberInput({ getInputProps, isInvalid }: NumberEditorChildrenProps) {\n  return (\n    <div style={{ display: 'inline-block' }}>\n      <Input\n        {...getInputProps()}\n        error={isInvalid} />\n      {isInvalid && <div>{errorMessage}</div>}\n    </div>\n  );\n}\n\nfunction formNumberEditorFactory<P extends FormNumberEditorProps>(intlProps: NumberEditorFactoryProps): React.FunctionComponent<P> {\n  return function FormNumberEditor({ value, onChange, children }: P) {\n    return (\n      <NumberEditor\n        {...intlProps}\n        value={value}\n        onChange={onChange}>\n        {children || DefaultFormNumberInput}\n      </NumberEditor>\n    );\n  };\n}\n\nexport type FormDecimalEditorProps = FormNumberEditorProps & Pick<NumberEditorBaseProps, 'minimumFractionDigits' | 'maximumFractionDigits'>;\nexport const FormDecimalEditor = formNumberEditorFactory<FormDecimalEditorProps>({\n  style: intlStyle.DECIMAL,\n  defaultFractionDigits: defaultFractionDigits.DECIMAL\n});\n\nexport type FormPercentEditorProps = FormNumberEditorProps & Pick<NumberEditorBaseProps, 'minimumFractionDigits' | 'maximumFractionDigits'>;\nexport const FormPercentEditor = formNumberEditorFactory<FormPercentEditorProps>({\n  style: intlStyle.PERCENT,\n  defaultFractionDigits: defaultFractionDigits.PERCENT\n});\n\nexport type FormCurrencyEditorProps = FormNumberEditorProps & Pick<NumberEditorBaseProps, 'minimumFractionDigits' | 'maximumFractionDigits'> & { currency: string; };\nexport const FormCurrencyEditor = formNumberEditorFactory<FormCurrencyEditorProps>({\n  style: intlStyle.CURRENCY\n});\n\nexport type FormRateEditorProps = FormNumberEditorProps & { currency: string };\nexport const FormRateEditor = formNumberEditorFactory<FormRateEditorProps>({\n  style: intlStyle.CURRENCY,\n  extraFractionDigits: extraFractionDigits.RATE\n});\n\nexport type FormTechRateEditorProps = FormNumberEditorProps & { currency: string };\nexport const FormTechRateEditor = formNumberEditorFactory<FormTechRateEditorProps>({\n  style: intlStyle.CURRENCY,\n  extraFractionDigits: extraFractionDigits.TECH_RATE\n});\n","type Omit<T, K extends keyof T> = Pick<T, Exclude<keyof T, K>>;\n/* eslint-disable react/style-prop-object */\nimport * as React from 'react';\nimport { FormattedNumber, injectIntl, InjectedIntlProps } from 'react-intl';\n\nimport {\n  getDefaultFractionDigitsForLocale,\n  intlStyle,\n  defaultFractionDigits,\n  extraFractionDigits\n} from './IntlUtils';\n\nexport interface IntegerFormatterProps {\n  // TODO: should it be a string and parsed before formatting?\n  value: number | undefined | null;\n}\n\ninterface FormatterProps extends IntegerFormatterProps {\n  /**\n   * The minimum number of fraction digits to use. Possible values are from 0 to 20;\n   * the default for plain number and percent formatting is 0; the default for currency\n   * formatting is the number of minor unit digits provided by the ISO 4217 currency code list\n   */\n  minimumFractionDigits?: number;\n\n  /**\n   * The maximum number of fraction digits to use. Possible values are from 0 to 20;\n   * the default for plain number formatting is the larger of minimumFractionDigits and 3;\n   * the default for currency formatting is the larger of minimumFractionDigits and\n   * the number of minor unit digits provided by the ISO 4217 currency code list\n   */\n  maximumFractionDigits?: number;\n}\n\ntype NumberFormatterProps = Omit<FormattedNumber.Props, 'value'> & IntegerFormatterProps & { defaultFractionDigits?: number; };\n\nfunction NumberFormatter({ value, defaultFractionDigits, ...props }: NumberFormatterProps) {\n  if (value == null) {\n    return null;\n  }\n\n  const { minimumFractionDigits, maximumFractionDigits } = props;\n  const extraProps: Partial<FormattedNumber.Props> = {};\n  if (typeof minimumFractionDigits === 'undefined' && typeof maximumFractionDigits === 'undefined' && typeof defaultFractionDigits !== 'undefined') {\n    extraProps.minimumFractionDigits = defaultFractionDigits;\n    extraProps.maximumFractionDigits = defaultFractionDigits;\n  }\n\n  return <FormattedNumber value={value} {...props} {...extraProps} />;\n}\n\nexport type DecimalFormatterProps = FormatterProps;\n\nexport function DecimalFormatter(props: DecimalFormatterProps) {\n  return (\n    <NumberFormatter\n      {...props}\n      style={intlStyle.DECIMAL}\n      defaultFractionDigits={defaultFractionDigits.DECIMAL} />\n  );\n}\n\nexport function IntegerFormatter(props: IntegerFormatterProps) {\n  return (\n    <DecimalFormatter\n      {...props}\n      maximumFractionDigits={0} />\n  );\n}\n\nexport type UnitsFormatterProps = IntegerFormatterProps;\n\nexport { IntegerFormatter as UnitsFormatter };\n\nexport type PercentFormatterProps = FormatterProps;\n\nexport function PercentFormatter(props: PercentFormatterProps) {\n  return (\n    <NumberFormatter\n      {...props}\n      style={intlStyle.PERCENT}\n      defaultFractionDigits={defaultFractionDigits.PERCENT} />\n  );\n}\n\nexport interface CurrencyFormatterProps extends FormatterProps {\n  /**\n   * The currency to use in currency formatting. Possible values are the ISO 4217 currency codes,\n   * such as \"USD\" for the US dollar, \"EUR\" for the euro, or \"CNY\" for the Chinese RMB\n   */\n  currency: string;\n}\n\nexport function CurrencyFormatter(props: CurrencyFormatterProps) {\n  return <NumberFormatter {...props} style={intlStyle.CURRENCY} />;\n}\n\nexport type DefaultCurrencyFormatterProps = Pick<CurrencyFormatterProps, 'value' | 'currency'>;\ntype DefaultCurrencyFormatterBaseProps = RateFormatterProps & InjectedIntlProps & { extraFractionDigits: number };\n\nfunction DefaultCurrencyFormatterBase({ intl, extraFractionDigits, ...props }: DefaultCurrencyFormatterBaseProps) {\n  // Add extra fraction digits to the default minimum fraction digits for the current locale and currency\n  const defaultFractionDigits = getDefaultFractionDigitsForLocale(\n    intl.locale, {\n      style: intlStyle.CURRENCY,\n      currency: props.currency\n    }\n  ).minimumFractionDigits + extraFractionDigits;\n\n  return (\n    <CurrencyFormatter\n      {...props}\n      minimumFractionDigits={defaultFractionDigits}\n      maximumFractionDigits={defaultFractionDigits} />\n  );\n}\n\nexport const DefaultCurrencyFormatter = injectIntl(DefaultCurrencyFormatterBase);\n\nexport type RateFormatterProps = DefaultCurrencyFormatterProps;\n\nexport function RateFormatter(props: RateFormatterProps) {\n  return (\n    <DefaultCurrencyFormatter\n      {...props}\n      extraFractionDigits={extraFractionDigits.RATE} />\n  );\n}\n\nexport type TechRateFormatterProps = DefaultCurrencyFormatterProps;\n\nexport function TechRateFormatter(props: TechRateFormatterProps) {\n  return (\n    <DefaultCurrencyFormatter\n      {...props}\n      extraFractionDigits={extraFractionDigits.TECH_RATE} />\n  );\n}\n","import './index.css';\nimport * as React from \"react\";\nimport { render } from \"react-dom\";\nimport { IntlProvider, addLocaleData } from \"react-intl\";\n\nimport {\n  GridDecimalEditor,\n  GridCurrencyEditor,\n  GridPercentEditor,\n  GridRateEditor\n} from \"./IntlEditors\";\n\nimport {\n  DecimalFormatter,\n  CurrencyFormatter,\n  PercentFormatter,\n  RateFormatter,\n  TechRateFormatter\n} from \"./IntlFormatters\";\n\nconst en = require(\"react-intl/locale-data/en\");\nconst fr = require(\"react-intl/locale-data/fr\");\nconst is = require(\"react-intl/locale-data/is\");\n\naddLocaleData([...en, ...fr, ...is]);\n\nclass Editors extends React.Component {\n  state = {\n    locale: \"en-US\",\n    minimumFractionDigits: 3,\n    maximumFractionDigits: 4,\n    currencyCode: \"USD\"\n  };\n  handleChange = e => {\n    console.log({ [e.target.name]: e.target.value })\n    this.setState({ [e.target.name]: e.target.value });\n  };\n\n  public render() {\n    return (\n      <IntlProvider locale={this.state.locale} key={this.state.locale}>\n        <div>\n          <fieldset>\n            <legend>Editors</legend>\n            <div style={{ margin: 20 }}>\n              <div style={{ marginTop: 20 }}>\n                <label>\n                  Locale:\n                  <select\n                    name=\"locale\"\n                    value={this.state.locale}\n                    onChange={this.handleChange}\n                  >\n                    <option value=\"fr-FR\">fr-FR</option>\n                    <option value=\"en-US\">en-US</option>\n                    <option value=\"en-GB\">en-GB</option>\n                    <option value=\"is-IS\">is-IS</option>\n                  </select>\n                </label>\n              </div>\n              <div style={{ marginTop: 20 }}>\n                <label>\n                  minimumFractionDigits:\n                  <input\n                    type=\"number\"\n                    name=\"minimumFractionDigits\"\n                    value={this.state.minimumFractionDigits}\n                    onChange={this.handleChange}\n                  />\n                </label>\n              </div>\n              <div style={{ marginTop: 20 }}>\n                <label>\n                  maximumFractionDigits:\n                  <input\n                    type=\"number\"\n                    name=\"maximumFractionDigits\"\n                    value={this.state.maximumFractionDigits}\n                    onChange={this.handleChange}\n                  />\n                </label>\n              </div>\n              <div style={{ marginTop: 20 }}>\n                <label>\n                  currency code:\n                  <input\n                    type=\"text\"\n                    name=\"currencyCode\"\n                    value={this.state.currencyCode}\n                    onChange={this.handleChange}\n                  />\n                </label>\n              </div>\n              <div style={{ marginTop: 20 }}>\n                <label>\n                  Grid Decimal Editor:\n                  <GridDecimalEditor\n                    defaultValue={2}\n                    minimumFractionDigits={this.state.minimumFractionDigits || undefined}\n                    maximumFractionDigits={this.state.maximumFractionDigits || undefined}\n                  />\n                </label>\n              </div>\n              <div style={{ marginTop: 20 }}>\n                <label>\n                  Grid Currency Editor:\n                  <GridCurrencyEditor\n                    defaultValue={2}\n                    currency={this.state.currencyCode}\n                    minimumFractionDigits={this.state.minimumFractionDigits || undefined}\n                    maximumFractionDigits={this.state.maximumFractionDigits || undefined}\n                  />\n                </label>\n              </div>\n              <div style={{ marginTop: 20 }}>\n                <label>\n                  Grid Percent Editor:\n                  <GridPercentEditor\n                    defaultValue={0.2}\n                    minimumFractionDigits={this.state.minimumFractionDigits || undefined}\n                    maximumFractionDigits={this.state.maximumFractionDigits || undefined}\n                  />\n                </label>\n              </div>\n              <div style={{ marginTop: 20 }}>\n                <label>\n                  Grid Rate Editor:\n                  <GridRateEditor\n                    defaultValue={20}\n                    currency={this.state.currencyCode}\n                  />\n                </label>\n              </div>\n            </div>\n          </fieldset>\n        </div>\n      </IntlProvider>\n    );\n  }\n}\n\nclass Formatters extends React.Component {\n  state = {\n    locale: \"en-US\",\n    minimumFractionDigits: 3,\n    maximumFractionDigits: 4,\n    currencyCode: \"USD\",\n    currencyFormatterValue: 2,\n    decimalFormatterValue: 1.2,\n    percentFormatterValue: 0.2,\n    rateFormatterValue: 3.4,\n    techRateFormatterValue: 1.2\n  };\n  handleChange = e => {\n    this.setState({ [e.target.name]: e.target.value });\n  };\n\n  public render() {\n    return (\n      <IntlProvider locale={this.state.locale} key={this.state.locale}>\n        <div>\n          <fieldset>\n            <legend>Formatters</legend>\n            <div style={{ margin: 20 }}>\n              <div style={{ marginTop: 20 }}>\n                <label>\n                  Locale:\n                  <select\n                    name=\"locale\"\n                    value={this.state.locale}\n                    onChange={this.handleChange}\n                  >\n                    <option value=\"fr-FR\">fr-FR</option>\n                    <option value=\"en-US\">en-US</option>\n                    <option value=\"en-GB\">en-GB</option>\n                    <option value=\"is-IS\">is-IS</option>\n                  </select>\n                </label>\n              </div>\n              <div style={{ marginTop: 20 }}>\n                <label>\n                  minimumFractionDigits:\n                  <input\n                    type=\"number\"\n                    name=\"minimumFractionDigits\"\n                    value={this.state.minimumFractionDigits}\n                    onChange={this.handleChange}\n                  />\n                </label>\n              </div>\n              <div style={{ marginTop: 20 }}>\n                <label>\n                  maximumFractionDigits:\n                  <input\n                    type=\"number\"\n                    name=\"maximumFractionDigits\"\n                    value={this.state.maximumFractionDigits}\n                    onChange={this.handleChange}\n                  />\n                </label>\n              </div>\n              <div style={{ marginTop: 20 }}>\n                <label>\n                  currency code:\n                  <input\n                    type=\"text\"\n                    name=\"currencyCode\"\n                    value={this.state.currencyCode}\n                    onChange={this.handleChange}\n                  />\n                </label>\n              </div>\n\n              <div style={{ marginTop: 20 }}>\n                <label>\n                  Decimal Formatter:\n                  <input\n                    type=\"number\"\n                    name=\"decimalFormatterValue\"\n                    value={this.state.decimalFormatterValue}\n                    onChange={this.handleChange}\n                  />\n                  <DecimalFormatter\n                    value={this.state.decimalFormatterValue}\n                    minimumFractionDigits={this.state.minimumFractionDigits || undefined}\n                    maximumFractionDigits={this.state.maximumFractionDigits || undefined}\n                  />\n                </label>\n              </div>\n\n              <div style={{ marginTop: 20 }}>\n                <label>\n                  CurrencyFormatter:\n                  <input\n                    type=\"number\"\n                    name=\"currencyFormatterValue\"\n                    value={this.state.currencyFormatterValue}\n                    onChange={this.handleChange}\n                  />\n                  <CurrencyFormatter\n                    value={this.state.currencyFormatterValue}\n                    currency={this.state.currencyCode}\n                    minimumFractionDigits={this.state.minimumFractionDigits || undefined}\n                    maximumFractionDigits={this.state.maximumFractionDigits || undefined}\n                  />\n                </label>\n              </div>\n\n              <div style={{ marginTop: 20 }}>\n                <label>\n                  PercentFormatter:\n                  <input\n                    type=\"number\"\n                    name=\"percentFormatterValue\"\n                    value={this.state.percentFormatterValue}\n                    onChange={this.handleChange}\n                  />\n                  <PercentFormatter\n                    value={this.state.percentFormatterValue}\n                    minimumFractionDigits={this.state.minimumFractionDigits || undefined}\n                    maximumFractionDigits={this.state.maximumFractionDigits || undefined}\n                  />\n                </label>\n              </div>\n\n              <div style={{ marginTop: 20 }}>\n                <label>\n                  Rate Formatter:\n                  <input\n                    type=\"number\"\n                    name=\"rateFormatterValue\"\n                    value={this.state.rateFormatterValue}\n                    onChange={this.handleChange}\n                  />\n                  <RateFormatter\n                    value={this.state.rateFormatterValue}\n                    currency={this.state.currencyCode}\n                  />\n                </label>\n              </div>\n\n              <div style={{ marginTop: 20 }}>\n                <label>\n                  Tech Rate Formatter:\n                  <input\n                    type=\"number\"\n                    name=\"techRateFormatterValue\"\n                    value={this.state.techRateFormatterValue}\n                    onChange={this.handleChange}\n                  />\n                  <TechRateFormatter\n                    value={this.state.techRateFormatterValue}\n                    currency={this.state.currencyCode}\n                  />\n                </label>\n              </div>\n            </div>\n          </fieldset>\n        </div>\n      </IntlProvider>\n    );\n  }\n}\n\nrender(\n  <div>\n    <Editors />\n    <Formatters />\n  </div>,\n  document.getElementById(\"root\")\n);"],"sourceRoot":""}